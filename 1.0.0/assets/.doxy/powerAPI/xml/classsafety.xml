<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classsafety" kind="class" language="C++" prot="public">
    <compoundname>safety</compoundname>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classsafety_1a17cd2d2d73de1720b908191b1842882a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void safety::init_shield</definition>
        <argsstring>()</argsstring>
        <name>init_shield</name>
        <qualifiedname>safety::init_shield</qualifiedname>
        <briefdescription>
<para>Initializes thresholds min/max with the default value from the device tree, if values were stored and found in the flash they will be used instead. All the sensors will be monitored to detect potential faults in voltage/current. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="48" column="10" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classsafety_1ae172421bc94acb8245b187d2858eccf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void safety::init_shield</definition>
        <argsstring>(sensor_t *sensors_watch, uint8_t sensors_watch_number)</argsstring>
        <name>init_shield</name>
        <qualifiedname>safety::init_shield</qualifiedname>
        <param>
          <type>sensor_t *</type>
          <declname>sensors_watch</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>sensors_watch_number</declname>
        </param>
        <briefdescription>
<para>Initializes thresholds min/max with the default value from the device tree, if values were stored and found in the flash they will be used instead. All the sensors will be monitored to detect potential faults in voltage/current. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_watch</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the sensors to watch. The variables in the list can be : V1_LOW, V2_LOW, V_HIGH, I1_LOW, I2_LOW, I_HIGH, TEMP_SENSOR, EXTRA_MEAS, ANALOG_COMM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensors_watch_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of sensors present in the list sensors_watch.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="61" column="10" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="38" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classsafety_1a74ab26d3ad584773d1e44b61f202406b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t safety::setChannelWatch</definition>
        <argsstring>(sensor_t *sensors_watch, uint8_t sensors_watch_number)</argsstring>
        <name>setChannelWatch</name>
        <qualifiedname>safety::setChannelWatch</qualifiedname>
        <param>
          <type>sensor_t *</type>
          <declname>sensors_watch</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>sensors_watch_number</declname>
        </param>
        <briefdescription>
<para>Enables the monitoring of the selected sensors for safety. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_watch</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the sensors to watch. The variables in the list can be : V1_LOW, V2_LOW, V_HIGH, I1_LOW, I2_LOW, I_HIGH, TEMP_SENSOR, EXTRA_MEAS, ANALOG_COMM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensors_watch_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of sensors present in the list sensors_watch.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if sucessfull, or -1 if there was an error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="72" column="12" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classsafety_1a281a7195b264a6c42947b4f02a21e271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t safety::unsetChannelWatch</definition>
        <argsstring>(sensor_t *sensors_watch, uint8_t sensors_watch_number)</argsstring>
        <name>unsetChannelWatch</name>
        <qualifiedname>safety::unsetChannelWatch</qualifiedname>
        <param>
          <type>sensor_t *</type>
          <declname>sensors_watch</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>sensors_watch_number</declname>
        </param>
        <briefdescription>
<para>Disables the monitoring of the selected sensors for safety. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_watch</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the sensors to unwatch. The variables in the list can be : V1_LOW, V2_LOW, V_HIGH, I1_LOW, I2_LOW, I_HIGH, TEMP_SENSOR, EXTRA_MEAS, ANALOG_COMM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensors_watch_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of sensors present in the list sensors_watch.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if sucessfull, or -1 if there was an error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="83" column="12" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="50" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classsafety_1aac97907a3261921145749577c75695f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool safety::getChannelWatch</definition>
        <argsstring>(sensor_t sensors_watch)</argsstring>
        <name>getChannelWatch</name>
        <qualifiedname>safety::getChannelWatch</qualifiedname>
        <param>
          <type>sensor_t</type>
          <declname>sensors_watch</declname>
        </param>
        <briefdescription>
<para>check if a sensor is being monitored or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the sensor to check <itemizedlist>
<listitem><para>V1_LOW </para>
</listitem>
<listitem><para>V2_LOW </para>
</listitem>
<listitem><para>V_HIGH </para>
</listitem>
<listitem><para>I1_LOW </para>
</listitem>
<listitem><para>I2_LOW </para>
</listitem>
<listitem><para>I_HIGH </para>
</listitem>
<listitem><para>TEMP_SENSOR </para>
</listitem>
<listitem><para>EXTRA_MEAS </para>
</listitem>
<listitem><para>ANALOG_COMM</para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the sensor is being monitored, false if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="101" column="10" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classsafety_1afdbff478f06aed861201f50ce6255599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void safety::setChannelReaction</definition>
        <argsstring>(safety_reaction_t sensors_reaction)</argsstring>
        <name>setChannelReaction</name>
        <qualifiedname>safety::setChannelReaction</qualifiedname>
        <param>
          <type>safety_reaction_t</type>
          <declname>sensors_reaction</declname>
        </param>
        <briefdescription>
<para>Set the reaction to do if an error has been detected. Choose either open-circuit (both switches are opened and no power flows in the output) or short-circuit (high-side switch is opened, and low-side is closed maintaining the output in short-circuit) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>the reaction to do <itemizedlist>
<listitem><para>Open_Circuit </para>
</listitem>
<listitem><para>Short_Circuit</para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="114" column="10" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classsafety_1a16b2849b2e40199f9ebf45fc8ce4e3d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>safety_reaction_t</type>
        <definition>safety_reaction_t safety::getChannelReaction</definition>
        <argsstring>()</argsstring>
        <name>getChannelReaction</name>
        <qualifiedname>safety::getChannelReaction</qualifiedname>
        <briefdescription>
<para>returns the reaction to do when encoutering an error. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Open_Circuit or Short_Circuit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="121" column="23" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="68" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classsafety_1afc05f1ba6b855be36995942fd5d0c8e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t safety::setChannelThresholdMax</definition>
        <argsstring>(sensor_t *sensors_threshold, float32_t *threshold_max, uint8_t sensors_threshold_number)</argsstring>
        <name>setChannelThresholdMax</name>
        <qualifiedname>safety::setChannelThresholdMax</qualifiedname>
        <param>
          <type>sensor_t *</type>
          <declname>sensors_threshold</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>threshold_max</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>sensors_threshold_number</declname>
        </param>
        <briefdescription>
<para>set the maximum threshold for the sensors present in the list safety_sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the sensors to set the threshold. The variables in the list can be : V1_LOW, V2_LOW, V_HIGH, I1_LOW, I2_LOW, I_HIGH, TEMP_SENSOR, EXTRA_MEAS, ANALOG_COMM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold_max</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the maximum threshold to apply to the sensors in safety_sensors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensors_threshold_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of sensors present in the list sensor_threshold</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if sucessfull, or -1 if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="133" column="12" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="74" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classsafety_1a67df559780c4c86b869cb3f39edfc2c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t safety::setChannelThresholdMin</definition>
        <argsstring>(sensor_t *sensors_threshold, float32_t *threshold_min, uint8_t sensors_threshold_number)</argsstring>
        <name>setChannelThresholdMin</name>
        <qualifiedname>safety::setChannelThresholdMin</qualifiedname>
        <param>
          <type>sensor_t *</type>
          <declname>sensors_threshold</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>threshold_min</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>sensors_threshold_number</declname>
        </param>
        <briefdescription>
<para>set the minimum threshold for the sensors present in the list safety_sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the sensors to set the threshold. The variables in the list can be : V1_LOW, V2_LOW, V_HIGH, I1_LOW, I2_LOW, I_HIGH, TEMP_SENSOR, EXTRA_MEAS, ANALOG_COMM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold_min</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the minimum threshold to apply to the sensors in safety_sensors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensors_threshold_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of sensors present in the list sensor_threshold</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if sucessfull, or -1 if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="145" column="12" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classsafety_1a84e8a8b84530157cf79ff878ac065682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t safety::getChannelThresholdMax</definition>
        <argsstring>(sensor_t sensors_threshold)</argsstring>
        <name>getChannelThresholdMax</name>
        <qualifiedname>safety::getChannelThresholdMax</qualifiedname>
        <param>
          <type>sensor_t</type>
          <declname>sensors_threshold</declname>
        </param>
        <briefdescription>
<para>get the maximum threshold of the selected sensor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>the sensor to check <itemizedlist>
<listitem><para>V1_LOW </para>
</listitem>
<listitem><para>V2_LOW </para>
</listitem>
<listitem><para>V_HIGH </para>
</listitem>
<listitem><para>I1_LOW </para>
</listitem>
<listitem><para>I2_LOW </para>
</listitem>
<listitem><para>I_HIGH </para>
</listitem>
<listitem><para>TEMP_SENSOR </para>
</listitem>
<listitem><para>EXTRA_MEAS </para>
</listitem>
<listitem><para>ANALOG_COMM</para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the maximum threshold </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="163" column="15" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classsafety_1a7fb81fd29e741b9b903fe73a0eb60b43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t safety::getChannelThresholdMin</definition>
        <argsstring>(sensor_t sensors_threshold)</argsstring>
        <name>getChannelThresholdMin</name>
        <qualifiedname>safety::getChannelThresholdMin</qualifiedname>
        <param>
          <type>sensor_t</type>
          <declname>sensors_threshold</declname>
        </param>
        <briefdescription>
<para>get the minimum threshold of the selected sensor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>the sensor to check <itemizedlist>
<listitem><para>V1_LOW </para>
</listitem>
<listitem><para>V2_LOW </para>
</listitem>
<listitem><para>V_HIGH </para>
</listitem>
<listitem><para>I1_LOW </para>
</listitem>
<listitem><para>I2_LOW </para>
</listitem>
<listitem><para>I_HIGH </para>
</listitem>
<listitem><para>TEMP_SENSOR </para>
</listitem>
<listitem><para>EXTRA_MEAS </para>
</listitem>
<listitem><para>ANALOG_COMM</para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the minimum threshold </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="181" column="15" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classsafety_1a6cddb28067c7438a87e014596def40b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool safety::getChannelError</definition>
        <argsstring>(sensor_t sensors_error)</argsstring>
        <name>getChannelError</name>
        <qualifiedname>safety::getChannelError</qualifiedname>
        <param>
          <type>sensor_t</type>
          <declname>sensors_error</declname>
        </param>
        <briefdescription>
<para>check if the sensor faced an error (went over/under threshold) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_error</parametername>
</parameternamelist>
<parameterdescription>
<para>the sensor to check <itemizedlist>
<listitem><para>V1_LOW </para>
</listitem>
<listitem><para>V2_LOW </para>
</listitem>
<listitem><para>V_HIGH </para>
</listitem>
<listitem><para>I1_LOW </para>
</listitem>
<listitem><para>I2_LOW </para>
</listitem>
<listitem><para>I_HIGH </para>
</listitem>
<listitem><para>TEMP_SENSOR </para>
</listitem>
<listitem><para>EXTRA_MEAS </para>
</listitem>
<listitem><para>ANALOG_COMM</para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the sensor faced an error, false if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="199" column="10" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classsafety_1afb77e029ac7817874cb1635857d86b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void safety::enableSafetyApi</definition>
        <argsstring>()</argsstring>
        <name>enableSafetyApi</name>
        <qualifiedname>safety::enableSafetyApi</qualifiedname>
        <briefdescription>
<para>enable the safet API fault detection task </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="207" column="10" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classsafety_1ae965ffc7ed12325b1d7703d902d3e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void safety::disableSafetyApi</definition>
        <argsstring>()</argsstring>
        <name>disableSafetyApi</name>
        <qualifiedname>safety::disableSafetyApi</qualifiedname>
        <briefdescription>
<para>disable the safet API fault detection task </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="214" column="10" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classsafety_1a15e26ec4a881100062f0d94596de93b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t safety::storeThreshold</definition>
        <argsstring>(sensor_t sensor_threshold_store)</argsstring>
        <name>storeThreshold</name>
        <qualifiedname>safety::storeThreshold</qualifiedname>
        <param>
          <type>sensor_t</type>
          <declname>sensor_threshold_store</declname>
        </param>
        <briefdescription>
<para>store the current minimum and maximum threshold in the flash (non volatile memory) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensor_threshold_store</parametername>
</parameternamelist>
<parameterdescription>
<para>the sensor for which we store the threshold in the NVS <itemizedlist>
<listitem><para>V1_LOW </para>
</listitem>
<listitem><para>V2_LOW </para>
</listitem>
<listitem><para>V_HIGH </para>
</listitem>
<listitem><para>I1_LOW </para>
</listitem>
<listitem><para>I2_LOW </para>
</listitem>
<listitem><para>I_HIGH </para>
</listitem>
<listitem><para>TEMP_SENSOR </para>
</listitem>
<listitem><para>EXTRA_MEAS </para>
</listitem>
<listitem><para>ANALOG_COMM</para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if parameters were correcly stored, -1 if there was an error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="233" column="12" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classsafety_1a35fb7ff7a08c40f403bbdc84dcad94f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t safety::retrieveThreshold</definition>
        <argsstring>(sensor_t sensor_threshold_retrieve)</argsstring>
        <name>retrieveThreshold</name>
        <qualifiedname>safety::retrieveThreshold</qualifiedname>
        <param>
          <type>sensor_t</type>
          <declname>sensor_threshold_retrieve</declname>
        </param>
        <briefdescription>
<para>store the current minimum and maximum threshold in the flash (non volatile memory) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensor_threshold_retrieve</parametername>
</parameternamelist>
<parameterdescription>
<para>the sensor for which we store the threshold in the NVS <itemizedlist>
<listitem><para>V1_LOW </para>
</listitem>
<listitem><para>V2_LOW </para>
</listitem>
<listitem><para>V_HIGH </para>
</listitem>
<listitem><para>I1_LOW </para>
</listitem>
<listitem><para>I2_LOW </para>
</listitem>
<listitem><para>I_HIGH </para>
</listitem>
<listitem><para>TEMP_SENSOR </para>
</listitem>
<listitem><para>EXTRA_MEAS </para>
</listitem>
<listitem><para>ANALOG_COMM</para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if parameters were correcly retreived, negative value if there was an error: -1: NVS is empty -2: NVS contains data, but their version doesn&apos;t match current version -3: NVS data is corrupted -4: NVS contains data, but not for the requested sensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="256" column="12" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="120" bodyend="124"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="37" column="1" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" bodystart="37" bodyend="257"/>
    <listofallmembers>
      <member refid="classsafety_1ae965ffc7ed12325b1d7703d902d3e3d4" prot="public" virt="non-virtual"><scope>safety</scope><name>disableSafetyApi</name></member>
      <member refid="classsafety_1afb77e029ac7817874cb1635857d86b8a" prot="public" virt="non-virtual"><scope>safety</scope><name>enableSafetyApi</name></member>
      <member refid="classsafety_1a6cddb28067c7438a87e014596def40b9" prot="public" virt="non-virtual"><scope>safety</scope><name>getChannelError</name></member>
      <member refid="classsafety_1a16b2849b2e40199f9ebf45fc8ce4e3d9" prot="public" virt="non-virtual"><scope>safety</scope><name>getChannelReaction</name></member>
      <member refid="classsafety_1a84e8a8b84530157cf79ff878ac065682" prot="public" virt="non-virtual"><scope>safety</scope><name>getChannelThresholdMax</name></member>
      <member refid="classsafety_1a7fb81fd29e741b9b903fe73a0eb60b43" prot="public" virt="non-virtual"><scope>safety</scope><name>getChannelThresholdMin</name></member>
      <member refid="classsafety_1aac97907a3261921145749577c75695f2" prot="public" virt="non-virtual"><scope>safety</scope><name>getChannelWatch</name></member>
      <member refid="classsafety_1a17cd2d2d73de1720b908191b1842882a" prot="public" virt="non-virtual"><scope>safety</scope><name>init_shield</name></member>
      <member refid="classsafety_1ae172421bc94acb8245b187d2858eccf6" prot="public" virt="non-virtual"><scope>safety</scope><name>init_shield</name></member>
      <member refid="classsafety_1a35fb7ff7a08c40f403bbdc84dcad94f7" prot="public" virt="non-virtual"><scope>safety</scope><name>retrieveThreshold</name></member>
      <member refid="classsafety_1afdbff478f06aed861201f50ce6255599" prot="public" virt="non-virtual"><scope>safety</scope><name>setChannelReaction</name></member>
      <member refid="classsafety_1afc05f1ba6b855be36995942fd5d0c8e0" prot="public" virt="non-virtual"><scope>safety</scope><name>setChannelThresholdMax</name></member>
      <member refid="classsafety_1a67df559780c4c86b869cb3f39edfc2c2" prot="public" virt="non-virtual"><scope>safety</scope><name>setChannelThresholdMin</name></member>
      <member refid="classsafety_1a74ab26d3ad584773d1e44b61f202406b" prot="public" virt="non-virtual"><scope>safety</scope><name>setChannelWatch</name></member>
      <member refid="classsafety_1a15e26ec4a881100062f0d94596de93b5" prot="public" virt="non-virtual"><scope>safety</scope><name>storeThreshold</name></member>
      <member refid="classsafety_1a281a7195b264a6c42947b4f02a21e271" prot="public" virt="non-virtual"><scope>safety</scope><name>unsetChannelWatch</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
