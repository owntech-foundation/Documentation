<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="data__dispatch_8h" kind="file" language="C++">
    <compoundname>data_dispatch.h</compoundname>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="data__dispatch_8h_1ab5e78dfe7a8fed890f2ce0fb0a542383" prot="public" static="no" strong="no">
        <type></type>
        <name>dispatch_t</name>
        <enumvalue id="data__dispatch_8h_1ab5e78dfe7a8fed890f2ce0fb0a542383a4919f1a195700069669d86a9022a9e62" prot="public">
          <name>task</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="data__dispatch_8h_1ab5e78dfe7a8fed890f2ce0fb0a542383a193148dae8e245f049e6b434ee5822b2" prot="public">
          <name>interrupt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dispatch method </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" line="50" column="1" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" bodystart="50" bodyend="50"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="data__dispatch_8h_1a2bc5bc514ef633524d31805f8a487a18" prot="public" static="no" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t PEEK_NO_VALUE</definition>
        <argsstring></argsstring>
        <name>PEEK_NO_VALUE</name>
        <initializer>= 0xFFFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" line="44" column="16" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="data__dispatch_8h_1af7a2d3ed1e2717c8fed2fa3724e12cc9" prot="public" static="no" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t CHANNELS_BUFFERS_SIZE</definition>
        <argsstring></argsstring>
        <name>CHANNELS_BUFFERS_SIZE</name>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" line="45" column="15" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" bodystart="45" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="data__dispatch_8h_1afdc22d3be89791538fb7af8c3a8adb68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void data_dispatch_init</definition>
        <argsstring>(dispatch_t dispatch_method, uint32_t repetitions)</argsstring>
        <name>data_dispatch_init</name>
        <param>
          <type>dispatch_t</type>
          <declname>dispatch_method</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>repetitions</declname>
        </param>
        <briefdescription>
<para>Init function to be called first. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispatch_method</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates when the dispatch should be done. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>repetitions</parametername>
</parameternamelist>
<parameterdescription>
<para>If dispatch is done at task start, this value represents the number of acquisitions that are done between two execution of the task. Ignored if dispatch is done on interrupt. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" line="62" column="6" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="120" bodyend="203" declfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" declline="62" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="data__dispatch_8h_1a8ee29e42025c0a494cf4ac1e9f2fa959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void data_dispatch_do_dispatch</definition>
        <argsstring>(uint8_t adc_number)</argsstring>
        <name>data_dispatch_do_dispatch</name>
        <param>
          <type>uint8_t</type>
          <declname>adc_number</declname>
        </param>
        <briefdescription>
<para>Dispatch function: gets the readings and store them in per-channel arrays. This functon is called by DMA callback when the DMA has filled one of its buffers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the ADC from which data comes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" line="71" column="6" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="205" bodyend="269" declfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="data__dispatch_8h_1acefeb0a090afb5be43e2cbae17c0263e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void data_dispatch_do_full_dispatch</definition>
        <argsstring>()</argsstring>
        <name>data_dispatch_do_full_dispatch</name>
        <briefdescription>
<para>Function to proceed to all chanels dispatch when it is done at uninterruptible task start. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" line="77" column="6" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="271" bodyend="277" declfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" declline="77" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="data__dispatch_8h_1a60c7faf2a9c6784fda863ebf8d564301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t *</type>
        <definition>uint16_t * data_dispatch_get_acquired_values</definition>
        <argsstring>(uint8_t adc_number, uint8_t channel_rank, uint32_t &amp;number_of_values_acquired)</argsstring>
        <name>data_dispatch_get_acquired_values</name>
        <param>
          <type>uint8_t</type>
          <declname>adc_number</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel_rank</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>number_of_values_acquired</declname>
        </param>
        <briefdescription>
<para>Obtain data for a specific channel. The data is provided as an array of values and the count of data in this buffer is returned as an output parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the ADC from which to obtain data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>Rank of the channel from which to obtain data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_values_acquired</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter: address to a variable that will be updated by the function with the data count. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Buffer containing the available data. Note that the returned buffer is invalidated by further calls to the function with same adc number/channel rank. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" line="97" column="10" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="283" bodyend="312" declfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" declline="97" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="data__dispatch_8h_1ac9d1c5171b4f3bb37046bde6c0b58777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t data_dispatch_peek_acquired_value</definition>
        <argsstring>(uint8_t adc_number, uint8_t channel_rank)</argsstring>
        <name>data_dispatch_peek_acquired_value</name>
        <param>
          <type>uint8_t</type>
          <declname>adc_number</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel_rank</declname>
        </param>
        <briefdescription>
<para>Peek data for a specific channel: obtain the latest value from the channel without removing it from the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the ADC from which to obtain data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>Rank of the channel from which to obtain data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Latest available value from the buffer. Note that if no value has been acquired, returned value will be 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" line="112" column="10" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="314" bodyend="338" declfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h" declline="112" declcolumn="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021-2023<sp/>LAAS-CNRS</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;https://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>LGPL-2.1</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DATA_DISPATCH_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DATA_DISPATCH_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stdlib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>PEEK_NO_VALUE<sp/>=<sp/>0xFFFF;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>CHANNELS_BUFFERS_SIZE<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{task,<sp/>interrupt}<sp/>dispatch_t;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>data_dispatch_init(dispatch_t<sp/>dispatch_method,<sp/>uint32_t<sp/>repetitions);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>data_dispatch_do_dispatch(uint8_t<sp/>adc_number);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>data_dispatch_do_full_dispatch();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">uint16_t*<sp/>data_dispatch_get_acquired_values(uint8_t<sp/>adc_number,<sp/>uint8_t<sp/>channel_rank,<sp/>uint32_t&amp;<sp/>number_of_values_acquired);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">uint16_t<sp/>data_dispatch_peek_acquired_value(uint8_t<sp/>adc_number,<sp/>uint8_t<sp/>channel_rank);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DATA_DISPATCH_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.h"/>
  </compounddef>
</doxygen>
