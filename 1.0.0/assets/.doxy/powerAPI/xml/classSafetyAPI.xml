<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classSafetyAPI" kind="class" language="C++" prot="public">
    <compoundname>SafetyAPI</compoundname>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classSafetyAPI_1a6bec8a0e30be9c82e393421bda45c8a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SafetyAPI::initShield</definition>
        <argsstring>()</argsstring>
        <name>initShield</name>
        <qualifiedname>SafetyAPI::initShield</qualifiedname>
        <briefdescription>
<para>Initializes thresholds min/max with the default value from the device tree. </para>
        </briefdescription>
        <detaileddescription>
<para>If values were stored and found in the flash they will be used instead.</para>
<para>All the sensors will be monitored to detect potential faults in voltage/current. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="51" column="10" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classSafetyAPI_1a81bcfe16b6c0a8d6a3c3840d1ae9fab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SafetyAPI::initShield</definition>
        <argsstring>(sensor_t *sensors_watch, uint8_t sensors_watch_number)</argsstring>
        <name>initShield</name>
        <qualifiedname>SafetyAPI::initShield</qualifiedname>
        <param>
          <type>sensor_t *</type>
          <declname>sensors_watch</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>sensors_watch_number</declname>
        </param>
        <briefdescription>
<para>Initializes thresholds min/max with the default value from the device tree. </para>
        </briefdescription>
        <detaileddescription>
<para>If values were stored and found in the flash they will be used instead.</para>
<para>All the sensors will be monitored to detect potential faults in voltage/current.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_watch</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the sensors to watch. The variables names can be: <linebreak/>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>V1_LOW</computeroutput>,<computeroutput>V2_LOW</computeroutput>, <computeroutput>V_HIGH</computeroutput>, <computeroutput>I1_LOW</computeroutput>,<computeroutput>I2_LOW</computeroutput>,<computeroutput>I_HIGH</computeroutput>, <computeroutput>TEMP_SENSOR</computeroutput>, <computeroutput>EXTRA_MEAS</computeroutput>, <computeroutput>ANALOG_COMM</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_watch_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of sensors present in the list sensors_watch. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="73" column="10" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="38" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classSafetyAPI_1a74576c06dc386dcfd1e4fb0ed4dca9c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t SafetyAPI::setChannelWatch</definition>
        <argsstring>(sensor_t *sensors_watch, uint8_t sensors_watch_number)</argsstring>
        <name>setChannelWatch</name>
        <qualifiedname>SafetyAPI::setChannelWatch</qualifiedname>
        <param>
          <type>sensor_t *</type>
          <declname>sensors_watch</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>sensors_watch_number</declname>
        </param>
        <briefdescription>
<para>Enables the monitoring of the selected sensors for safety. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_watch</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the sensors to watch. The variables names can be: <linebreak/>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>V1_LOW</computeroutput>,<computeroutput>V2_LOW</computeroutput>, <computeroutput>V_HIGH</computeroutput>, <computeroutput>I1_LOW</computeroutput>,<computeroutput>I2_LOW</computeroutput>,<computeroutput>I_HIGH</computeroutput>, <computeroutput>TEMP_SENSOR</computeroutput>, <computeroutput>EXTRA_MEAS</computeroutput>, <computeroutput>ANALOG_COMM</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_watch_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of sensors present in the list sensors_watch.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful, or <computeroutput>-1</computeroutput> if there was an error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="89" column="12" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="45" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classSafetyAPI_1a2b4cc5d76f9791f333759156e7482a4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t SafetyAPI::unsetChannelWatch</definition>
        <argsstring>(sensor_t *sensors_watch, uint8_t sensors_watch_number)</argsstring>
        <name>unsetChannelWatch</name>
        <qualifiedname>SafetyAPI::unsetChannelWatch</qualifiedname>
        <param>
          <type>sensor_t *</type>
          <declname>sensors_watch</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>sensors_watch_number</declname>
        </param>
        <briefdescription>
<para>Disables the monitoring of the selected sensors for safety. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_watch</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the sensors to watch. The variables names can be: <linebreak/>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>V1_LOW</computeroutput>,<computeroutput>V2_LOW</computeroutput>, <computeroutput>V_HIGH</computeroutput>, <computeroutput>I1_LOW</computeroutput>,<computeroutput>I2_LOW</computeroutput>,<computeroutput>I_HIGH</computeroutput>, <computeroutput>TEMP_SENSOR</computeroutput>, <computeroutput>EXTRA_MEAS</computeroutput>, <computeroutput>ANALOG_COMM</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_watch_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of sensors present in the list sensors_watch.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful, or <computeroutput>-1</computeroutput> if there was an error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="106" column="12" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="52" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classSafetyAPI_1a5adb3469c0e7caa333d6b83af1af846f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SafetyAPI::getChannelWatch</definition>
        <argsstring>(sensor_t sensors_watch)</argsstring>
        <name>getChannelWatch</name>
        <qualifiedname>SafetyAPI::getChannelWatch</qualifiedname>
        <param>
          <type>sensor_t</type>
          <declname>sensors_watch</declname>
        </param>
        <briefdescription>
<para>check if a sensor is being monitored or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the sensor to check within the possible names:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>V1_LOW</computeroutput>,<computeroutput>V2_LOW</computeroutput>, <computeroutput>V_HIGH</computeroutput>, <computeroutput>I1_LOW</computeroutput>,<computeroutput>I2_LOW</computeroutput>,<computeroutput>I_HIGH</computeroutput>, <computeroutput>TEMP_SENSOR</computeroutput>, <computeroutput>EXTRA_MEAS</computeroutput>, <computeroutput>ANALOG_COMM</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the sensor is being monitored, <computeroutput>false</computeroutput> if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="119" column="10" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classSafetyAPI_1a6f224b5c0fd69eb08971a6f20ac15049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SafetyAPI::setChannelReaction</definition>
        <argsstring>(safety_reaction_t sensors_reaction)</argsstring>
        <name>setChannelReaction</name>
        <qualifiedname>SafetyAPI::setChannelReaction</qualifiedname>
        <param>
          <type>safety_reaction_t</type>
          <declname>sensors_reaction</declname>
        </param>
        <briefdescription>
<para>Set the reaction to do if an error has been detected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>the reaction to do:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<itemizedlist>
<listitem><para><computeroutput>Open_Circuit</computeroutput>: both switches are opened and no power flows to the output</para>
</listitem><listitem><para><computeroutput>Short_Circuit</computeroutput>: high-side switch is opened, and low-side is closed maintaining the output in short-circuit. Useful in motor control. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="134" column="10" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="66" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classSafetyAPI_1a01279a47493f445a4cb61e0426cd182e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>safety_reaction_t</type>
        <definition>safety_reaction_t SafetyAPI::getChannelReaction</definition>
        <argsstring>()</argsstring>
        <name>getChannelReaction</name>
        <qualifiedname>SafetyAPI::getChannelReaction</qualifiedname>
        <briefdescription>
<para>returns the reaction to do when encountering an error. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Open_Circuit or Short_Circuit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="141" column="23" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="72" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classSafetyAPI_1abc3da76870ab8b6773440d66c47896a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t SafetyAPI::setChannelThresholdMax</definition>
        <argsstring>(sensor_t *sensors_threshold, float32_t *threshold_max, uint8_t sensors_threshold_number)</argsstring>
        <name>setChannelThresholdMax</name>
        <qualifiedname>SafetyAPI::setChannelThresholdMax</qualifiedname>
        <param>
          <type>sensor_t *</type>
          <declname>sensors_threshold</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>threshold_max</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>sensors_threshold_number</declname>
        </param>
        <briefdescription>
<para>Set the maximum threshold for the sensors present in the list safety_sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the sensors to watch. The variables names can be: <linebreak/>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>V1_LOW</computeroutput>,<computeroutput>V2_LOW</computeroutput>, <computeroutput>V_HIGH</computeroutput>, <computeroutput>I1_LOW</computeroutput>,<computeroutput>I2_LOW</computeroutput>,<computeroutput>I_HIGH</computeroutput>, <computeroutput>TEMP_SENSOR</computeroutput>, <computeroutput>EXTRA_MEAS</computeroutput>, <computeroutput>ANALOG_COMM</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threshold_max</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the maximum threshold to apply to the sensors in safety_sensors.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensors_threshold_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of sensors present in the list sensor_threshold</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful, or <computeroutput>-1</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="161" column="12" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="78" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classSafetyAPI_1af2b2143a6f926e13afb45f26a82cc7f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t SafetyAPI::setChannelThresholdMin</definition>
        <argsstring>(sensor_t *sensors_threshold, float32_t *threshold_min, uint8_t sensors_threshold_number)</argsstring>
        <name>setChannelThresholdMin</name>
        <qualifiedname>SafetyAPI::setChannelThresholdMin</qualifiedname>
        <param>
          <type>sensor_t *</type>
          <declname>sensors_threshold</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>threshold_min</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>sensors_threshold_number</declname>
        </param>
        <briefdescription>
<para>Set the minimum threshold for the sensors present in the list safety_sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the sensors to watch. The variables names can be: <linebreak/>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>V1_LOW</computeroutput>,<computeroutput>V2_LOW</computeroutput>, <computeroutput>V_HIGH</computeroutput>, <computeroutput>I1_LOW</computeroutput>,<computeroutput>I2_LOW</computeroutput>,<computeroutput>I_HIGH</computeroutput>, <computeroutput>TEMP_SENSOR</computeroutput>, <computeroutput>EXTRA_MEAS</computeroutput>, <computeroutput>ANALOG_COMM</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threshold_min</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the minimum threshold to apply to the sensors in safety_sensors.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensors_threshold_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of sensors present in the list sensor_threshold</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful, or <computeroutput>-1</computeroutput> if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="183" column="12" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="88" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classSafetyAPI_1ac47d7d78d95dd9552b2469c741e8b22f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t SafetyAPI::getChannelThresholdMax</definition>
        <argsstring>(sensor_t sensors_threshold)</argsstring>
        <name>getChannelThresholdMax</name>
        <qualifiedname>SafetyAPI::getChannelThresholdMax</qualifiedname>
        <param>
          <type>sensor_t</type>
          <declname>sensors_threshold</declname>
        </param>
        <briefdescription>
<para>Get the maximum threshold of the selected sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>the sensor to check within the possible names:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>V1_LOW</computeroutput>,<computeroutput>V2_LOW</computeroutput>, <computeroutput>V_HIGH</computeroutput>, <computeroutput>I1_LOW</computeroutput>,<computeroutput>I2_LOW</computeroutput>,<computeroutput>I_HIGH</computeroutput>, <computeroutput>TEMP_SENSOR</computeroutput>, <computeroutput>EXTRA_MEAS</computeroutput>, <computeroutput>ANALOG_COMM</computeroutput></para>
<para><simplesect kind="return"><para>the maximum threshold </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="197" column="15" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classSafetyAPI_1a7eb703ca003a0da4a47fd97c8e04def5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t SafetyAPI::getChannelThresholdMin</definition>
        <argsstring>(sensor_t sensors_threshold)</argsstring>
        <name>getChannelThresholdMin</name>
        <qualifiedname>SafetyAPI::getChannelThresholdMin</qualifiedname>
        <param>
          <type>sensor_t</type>
          <declname>sensors_threshold</declname>
        </param>
        <briefdescription>
<para>Get the minimum threshold of the selected sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>the sensor to check within the possible names:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>V1_LOW</computeroutput>,<computeroutput>V2_LOW</computeroutput>, <computeroutput>V_HIGH</computeroutput>, <computeroutput>I1_LOW</computeroutput>,<computeroutput>I2_LOW</computeroutput>,<computeroutput>I_HIGH</computeroutput>, <computeroutput>TEMP_SENSOR</computeroutput>, <computeroutput>EXTRA_MEAS</computeroutput>, <computeroutput>ANALOG_COMM</computeroutput></para>
<para><simplesect kind="return"><para>The minimum threshold </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="209" column="15" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classSafetyAPI_1a4ce185c3da7fc38084c2962a05b5dbc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SafetyAPI::getChannelError</definition>
        <argsstring>(sensor_t sensors_error)</argsstring>
        <name>getChannelError</name>
        <qualifiedname>SafetyAPI::getChannelError</qualifiedname>
        <param>
          <type>sensor_t</type>
          <declname>sensors_error</declname>
        </param>
        <briefdescription>
<para>Check if the sensor faced an error (went over/under threshold) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensors_error</parametername>
</parameternamelist>
<parameterdescription>
<para>the sensor to check within the possible names:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>V1_LOW</computeroutput>,<computeroutput>V2_LOW</computeroutput>, <computeroutput>V_HIGH</computeroutput>, <computeroutput>I1_LOW</computeroutput>,<computeroutput>I2_LOW</computeroutput>,<computeroutput>I_HIGH</computeroutput>, <computeroutput>TEMP_SENSOR</computeroutput>, <computeroutput>EXTRA_MEAS</computeroutput>, <computeroutput>ANALOG_COMM</computeroutput></para>
<para><simplesect kind="return"><para>True if the sensor faced an error, false if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="221" column="10" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classSafetyAPI_1a2870f884ad8bfabfac7d1fa6c0727bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SafetyAPI::enableSafetyApi</definition>
        <argsstring>()</argsstring>
        <name>enableSafetyApi</name>
        <qualifiedname>SafetyAPI::enableSafetyApi</qualifiedname>
        <briefdescription>
<para>Enables the safety API fault detection task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="227" column="10" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classSafetyAPI_1aaae5328105933683184031f7cbf3355a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SafetyAPI::disableSafetyApi</definition>
        <argsstring>()</argsstring>
        <name>disableSafetyApi</name>
        <qualifiedname>SafetyAPI::disableSafetyApi</qualifiedname>
        <briefdescription>
<para>Disables the safety API fault detection task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="232" column="10" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classSafetyAPI_1aec8951ae95d1fb56b3ba6fd811950119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t SafetyAPI::storeThreshold</definition>
        <argsstring>(sensor_t sensor_threshold_store)</argsstring>
        <name>storeThreshold</name>
        <qualifiedname>SafetyAPI::storeThreshold</qualifiedname>
        <param>
          <type>sensor_t</type>
          <declname>sensor_threshold_store</declname>
        </param>
        <briefdescription>
<para>Store the current minimum and maximum threshold in the flash (non volatile memory) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensor_threshold_store</parametername>
</parameternamelist>
<parameterdescription>
<para>the sensor to store the threshold in the NVS within the possible names:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>V1_LOW</computeroutput>,<computeroutput>V2_LOW</computeroutput>, <computeroutput>V_HIGH</computeroutput>, <computeroutput>I1_LOW</computeroutput>,<computeroutput>I2_LOW</computeroutput>,<computeroutput>I_HIGH</computeroutput>, <computeroutput>TEMP_SENSOR</computeroutput>, <computeroutput>EXTRA_MEAS</computeroutput>, <computeroutput>ANALOG_COMM</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensor_threshold_store</parametername>
</parameternamelist>
<parameterdescription>
<para>The sensor for which we store the threshold in the NVS</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if parameters were correctly stored, <computeroutput>-1</computeroutput> if there was an error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="250" column="12" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="126" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classSafetyAPI_1ae3bbc3c4ecab3b16f91e6817da074508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t SafetyAPI::retrieveThreshold</definition>
        <argsstring>(sensor_t sensor_threshold_retrieve)</argsstring>
        <name>retrieveThreshold</name>
        <qualifiedname>SafetyAPI::retrieveThreshold</qualifiedname>
        <param>
          <type>sensor_t</type>
          <declname>sensor_threshold_retrieve</declname>
        </param>
        <briefdescription>
<para>Retrieves the current minimum and maximum threshold stored in the flash (non volatile memory) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensor_threshold_retrieve</parametername>
</parameternamelist>
<parameterdescription>
<para>the sensor to retrieve the threshold stored in the NVS within the possible names:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>V1_LOW</computeroutput>,<computeroutput>V2_LOW</computeroutput>, <computeroutput>V_HIGH</computeroutput>, <computeroutput>I1_LOW</computeroutput>,<computeroutput>I2_LOW</computeroutput>,<computeroutput>I_HIGH</computeroutput>, <computeroutput>TEMP_SENSOR</computeroutput>, <computeroutput>EXTRA_MEAS</computeroutput>, <computeroutput>ANALOG_COMM</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>0</computeroutput> if parameters were correctly retrieved, negative value if there was an error:</para>
</simplesect>
<itemizedlist>
<listitem><para><computeroutput>-1</computeroutput>: NVS is empty</para>
</listitem><listitem><para><computeroutput>-2</computeroutput>: NVS contains data, but their version doesn&apos;t match current version</para>
</listitem><listitem><para><computeroutput>-3</computeroutput>: NVS data is corrupted</para>
</listitem><listitem><para><computeroutput>-4</computeroutput>: NVS contains data, but not for the requested sensor </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="274" column="12" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.cpp" bodystart="131" bodyend="135"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" line="37" column="1" bodyfile="docs/core/zephyr/modules/owntech_safety_api/zephyr/public_api/SafetyAPI.h" bodystart="37" bodyend="277"/>
    <listofallmembers>
      <member refid="classSafetyAPI_1aaae5328105933683184031f7cbf3355a" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>disableSafetyApi</name></member>
      <member refid="classSafetyAPI_1a2870f884ad8bfabfac7d1fa6c0727bec" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>enableSafetyApi</name></member>
      <member refid="classSafetyAPI_1a4ce185c3da7fc38084c2962a05b5dbc5" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>getChannelError</name></member>
      <member refid="classSafetyAPI_1a01279a47493f445a4cb61e0426cd182e" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>getChannelReaction</name></member>
      <member refid="classSafetyAPI_1ac47d7d78d95dd9552b2469c741e8b22f" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>getChannelThresholdMax</name></member>
      <member refid="classSafetyAPI_1a7eb703ca003a0da4a47fd97c8e04def5" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>getChannelThresholdMin</name></member>
      <member refid="classSafetyAPI_1a5adb3469c0e7caa333d6b83af1af846f" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>getChannelWatch</name></member>
      <member refid="classSafetyAPI_1a6bec8a0e30be9c82e393421bda45c8a5" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>initShield</name></member>
      <member refid="classSafetyAPI_1a81bcfe16b6c0a8d6a3c3840d1ae9fab3" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>initShield</name></member>
      <member refid="classSafetyAPI_1ae3bbc3c4ecab3b16f91e6817da074508" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>retrieveThreshold</name></member>
      <member refid="classSafetyAPI_1a6f224b5c0fd69eb08971a6f20ac15049" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>setChannelReaction</name></member>
      <member refid="classSafetyAPI_1abc3da76870ab8b6773440d66c47896a7" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>setChannelThresholdMax</name></member>
      <member refid="classSafetyAPI_1af2b2143a6f926e13afb45f26a82cc7f9" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>setChannelThresholdMin</name></member>
      <member refid="classSafetyAPI_1a74576c06dc386dcfd1e4fb0ed4dca9c1" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>setChannelWatch</name></member>
      <member refid="classSafetyAPI_1aec8951ae95d1fb56b3ba6fd811950119" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>storeThreshold</name></member>
      <member refid="classSafetyAPI_1a2b4cc5d76f9791f333759156e7482a4f" prot="public" virt="non-virtual"><scope>SafetyAPI</scope><name>unsetChannelWatch</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
