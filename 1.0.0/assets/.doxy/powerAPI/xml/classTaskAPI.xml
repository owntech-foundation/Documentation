<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classTaskAPI" kind="class" language="C++" prot="public">
    <compoundname>TaskAPI</compoundname>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classTaskAPI_1aed57f64fd1ebfd9b0bd03eeb3b1fd635" prot="private" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int TaskAPI::DEFAULT_PRIORITY</definition>
        <argsstring></argsstring>
        <name>DEFAULT_PRIORITY</name>
        <qualifiedname>TaskAPI::DEFAULT_PRIORITY</qualifiedname>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="date"><para>2023 </para>
</simplesect>
<simplesect kind="author"><para>Clément Foucher <ulink url="mailto:clement.foucher@laas.fr">clement.foucher@laas.fr</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.h" line="183" column="18" bodyfile="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.h" bodystart="183" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classTaskAPI_1af1b06cdd5723218373beb6427c8b89da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t TaskAPI::createCritical</definition>
        <argsstring>(task_function_t periodic_task, uint32_t task_period_us, scheduling_interrupt_source_t int_source=source_hrtim)</argsstring>
        <name>createCritical</name>
        <qualifiedname>TaskAPI::createCritical</qualifiedname>
        <param>
          <type>task_function_t</type>
          <declname>periodic_task</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>task_period_us</declname>
        </param>
        <param>
          <type>scheduling_interrupt_source_t</type>
          <declname>int_source</declname>
          <defval>source_hrtim</defval>
        </param>
        <briefdescription>
<para>Creates a time critial task. A critical task is an Uninterruptible Synchronous Task that uses a precise timer to execute a periodic, non-interruptible user task. Use this function to define such a task. Only one task of this kind can be defined. This function can be used to redefine (replace) a previously defined uninterruptible synchronous task, but the previously defined task must have been suspended (or never started). An error will be returned if the previously defined task is still running. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If the HRTIM is used to trigger the task (which is the default behavior), then the HRTIM must have been configured <emphasis>before</emphasis> calling this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>periodic_task</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the void(void) function to be executed periodically. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>task_period_us</parametername>
</parameternamelist>
<parameterdescription>
<para>Period of the function in µs. Allowed range: 1 to 6553 µs. If interrupt source is HRTIM, this value <emphasis>must</emphasis> be an integer multiple of the HRTIM period. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_source</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt source that triggers the task. By default, the HRTIM is the source, but this optional parameter can be provided to set TIM6 as the source in case the HRTIM is not used or if the task can&apos;t be correlated to an HRTIM event. Allowed values are source_hrtim and source_tim6. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if everything went well, -1 if there was an error defining the task. An error can occur notably when an uninterruptible task has already been defined previously. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.h" line="83" column="8" bodyfile="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.cpp" bodystart="52" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classTaskAPI_1aa2a253e51328a5238e873cf7c5a9c485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TaskAPI::startCritical</definition>
        <argsstring>(bool manage_data_acquisition=true)</argsstring>
        <name>startCritical</name>
        <qualifiedname>TaskAPI::startCritical</qualifiedname>
        <param>
          <type>bool</type>
          <declname>manage_data_acquisition</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Use this function to start a previously defined a critical task. </para>
        </briefdescription>
        <detaileddescription>
<para>A critical task is an Uninterruptible Synchronous Task that uses a precise timer to execute a periodic, non-interruptible user task.</para>
<para>If no value is provided for the parameter and Data Acquisition has not been started yet, Scheduling will automatically start Data Acquisition. Thus, make sure all ADC configuration has been carried out before starting the uninterruptible task.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>manage_data_acquisition</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to false if you want the Scheduling module to not be in charge of Data Acquisition scheduling. If set to false, Data Acquisition has to be manually started if you want to use it. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.h" line="103" column="6" bodyfile="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.cpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classTaskAPI_1a85738b38142159d1e5638e2e659772d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TaskAPI::stopCritical</definition>
        <argsstring>()</argsstring>
        <name>stopCritical</name>
        <qualifiedname>TaskAPI::stopCritical</qualifiedname>
        <briefdescription>
<para>Stop the previously started critical task. A critical task is an Uninterruptible Synchronous Task that uses a precise timer to execute a periodic, non-interruptible user task. The task can be then resumed by calling <ref refid="classTaskAPI_1aa2a253e51328a5238e873cf7c5a9c485" kindref="member">startCritical()</ref> again. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.h" line="112" column="6" bodyfile="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.cpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classTaskAPI_1a6f2330d3b5ff507e4ea4e49a67b52e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t TaskAPI::createBackground</definition>
        <argsstring>(task_function_t routine)</argsstring>
        <name>createBackground</name>
        <qualifiedname>TaskAPI::createBackground</qualifiedname>
        <param>
          <type>task_function_t</type>
          <declname>routine</declname>
        </param>
        <briefdescription>
<para>Creates a background task. Background tasks are asynchronous tasks that run in the background when there is no critical task running. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>routine</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the void(void) function that will act as the task main function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number assigned to the task. Will be -1 if max number of asynchronous task has been reached. In such a case, the task definition is ignored. Increase maximum number of asynchronous tasks in prj.conf if required. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.h" line="130" column="8" bodyfile="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.cpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classTaskAPI_1a900beb4cbf0eaef5da81d4af1a5ee2bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TaskAPI::startBackground</definition>
        <argsstring>(uint8_t task_number)</argsstring>
        <name>startBackground</name>
        <qualifiedname>TaskAPI::startBackground</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>task_number</declname>
        </param>
        <briefdescription>
<para>Use this function to start a previously defined background task using its task number. </para>
        </briefdescription>
        <detaileddescription>
<para>Background tasks are asynchronous tasks that run in the background when there is no critical task running.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the task to start, obtained using the defineAsynchronousTask() function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.h" line="142" column="6" bodyfile="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.cpp" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classTaskAPI_1abfa1beb72530562674e4240a3268876f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TaskAPI::stopBackground</definition>
        <argsstring>(uint8_t task_number)</argsstring>
        <name>stopBackground</name>
        <qualifiedname>TaskAPI::stopBackground</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>task_number</declname>
        </param>
        <briefdescription>
<para>Use this function to stop a previously started background task using its task number. </para>
        </briefdescription>
        <detaileddescription>
<para>Background tasks are asynchronous tasks that run in the background when there is no critical task running. The task can be then resumed by calling startAsynchronousTask() again.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the task to start, obtained using the defineAsynchronousTask() function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.h" line="156" column="6" bodyfile="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.cpp" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classTaskAPI_1a53bfefe0bd4bb85cb672a61cf33fb8b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TaskAPI::suspendBackgroundMs</definition>
        <argsstring>(uint32_t duration_ms)</argsstring>
        <name>suspendBackgroundMs</name>
        <qualifiedname>TaskAPI::suspendBackgroundMs</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>duration_ms</declname>
        </param>
        <briefdescription>
<para>This function allows to suspend a background task for a specified duration expressed in milliseconds. For example, you can call this function at the end of a background task function, when there is no need for the task to run permanently. </para>
        </briefdescription>
        <detaileddescription>
<para>DO NOT use this function in a critical task! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.h" line="167" column="6" bodyfile="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.cpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classTaskAPI_1a2d3253dcdfd51f66e290e53476f467e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TaskAPI::suspendBackgroundUs</definition>
        <argsstring>(uint32_t duration_us)</argsstring>
        <name>suspendBackgroundUs</name>
        <qualifiedname>TaskAPI::suspendBackgroundUs</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>duration_us</declname>
        </param>
        <briefdescription>
<para>This function allows to suspend a background task for a specified duration expressed in microseconds. For example, you can call this function at the end of a background task function, when there is no need for the task to run permanently. </para>
        </briefdescription>
        <detaileddescription>
<para>DO NOT use this function in a critical task! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.h" line="178" column="6" bodyfile="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.cpp" bodystart="95" bodyend="98"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.h" line="47" column="1" bodyfile="docs/core/zephyr/modules/owntech_task_api/zephyr/public_api/TaskAPI.h" bodystart="48" bodyend="185"/>
    <listofallmembers>
      <member refid="classTaskAPI_1a6f2330d3b5ff507e4ea4e49a67b52e57" prot="public" virt="non-virtual"><scope>TaskAPI</scope><name>createBackground</name></member>
      <member refid="classTaskAPI_1af1b06cdd5723218373beb6427c8b89da" prot="public" virt="non-virtual"><scope>TaskAPI</scope><name>createCritical</name></member>
      <member refid="classTaskAPI_1aed57f64fd1ebfd9b0bd03eeb3b1fd635" prot="private" virt="non-virtual"><scope>TaskAPI</scope><name>DEFAULT_PRIORITY</name></member>
      <member refid="classTaskAPI_1a900beb4cbf0eaef5da81d4af1a5ee2bc" prot="public" virt="non-virtual"><scope>TaskAPI</scope><name>startBackground</name></member>
      <member refid="classTaskAPI_1aa2a253e51328a5238e873cf7c5a9c485" prot="public" virt="non-virtual"><scope>TaskAPI</scope><name>startCritical</name></member>
      <member refid="classTaskAPI_1abfa1beb72530562674e4240a3268876f" prot="public" virt="non-virtual"><scope>TaskAPI</scope><name>stopBackground</name></member>
      <member refid="classTaskAPI_1a85738b38142159d1e5638e2e659772d2" prot="public" virt="non-virtual"><scope>TaskAPI</scope><name>stopCritical</name></member>
      <member refid="classTaskAPI_1a53bfefe0bd4bb85cb672a61cf33fb8b8" prot="public" virt="non-virtual"><scope>TaskAPI</scope><name>suspendBackgroundMs</name></member>
      <member refid="classTaskAPI_1a2d3253dcdfd51f66e290e53476f467e7" prot="public" virt="non-virtual"><scope>TaskAPI</scope><name>suspendBackgroundUs</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
