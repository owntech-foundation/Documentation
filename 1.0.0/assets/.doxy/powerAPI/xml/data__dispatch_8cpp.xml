<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="data__dispatch_8cpp" kind="file" language="C++">
    <compoundname>data_dispatch.cpp</compoundname>
    <sectiondef kind="var">
      <memberdef kind="variable" id="data__dispatch_8cpp_1a2aa90212af7f7757823187b9b1fb7864" prot="public" static="yes" mutable="no">
        <type>uint8_t *</type>
        <definition>uint8_t* enabled_channels_count</definition>
        <argsstring></argsstring>
        <name>enabled_channels_count</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="date"><para>2023</para>
</simplesect>
<simplesect kind="author"><para>Cl√©ment Foucher <ulink url="mailto:clement.foucher@laas.fr">clement.foucher@laas.fr</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="48" column="16" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="data__dispatch_8cpp_1a7e74db811b1d85ec73888441defe93a5" prot="public" static="yes" mutable="no">
        <type>uint16_t ****</type>
        <definition>uint16_t**** adc_channel_buffers</definition>
        <argsstring></argsstring>
        <name>adc_channel_buffers</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="53" column="17" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="data__dispatch_8cpp_1aad19fdf2c210be16c7b16f9dc8eb6175" prot="public" static="yes" mutable="no">
        <type>uint32_t **</type>
        <definition>uint32_t** buffers_data_count</definition>
        <argsstring></argsstring>
        <name>buffers_data_count</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="58" column="17" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="data__dispatch_8cpp_1a0e15a12a6c563c5b8da06adb2b1bb2ba" prot="public" static="yes" mutable="no">
        <type>uint8_t **</type>
        <definition>uint8_t** current_buffer</definition>
        <argsstring></argsstring>
        <name>current_buffer</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="64" column="16" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="data__dispatch_8cpp_1a7bc992e3acc74ef0b086016e3d89b125" prot="public" static="yes" mutable="no">
        <type>uint16_t **</type>
        <definition>uint16_t** peek_memory</definition>
        <argsstring></argsstring>
        <name>peek_memory</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="68" column="17" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="data__dispatch_8cpp_1abbf092815e44f223d1b42d03b7971186" prot="public" static="yes" mutable="no">
        <type>uint16_t *</type>
        <definition>uint16_t* dma_main_buffers[ADC_COUNT]</definition>
        <argsstring>[ADC_COUNT]</argsstring>
        <name>dma_main_buffers</name>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="76" column="17" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="variable" id="data__dispatch_8cpp_1a71926c6d5cd5aa71a5e133c00b130a79" prot="public" static="yes" mutable="no">
        <type>uint16_t *</type>
        <definition>uint16_t* dma_secondary_buffers[ADC_COUNT]</definition>
        <argsstring>[ADC_COUNT]</argsstring>
        <name>dma_secondary_buffers</name>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="77" column="17" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="variable" id="data__dispatch_8cpp_1a8f4220126e9c10ec4ef5bc0481961efd" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t current_dma_buffer[ADC_COUNT]</definition>
        <argsstring>[ADC_COUNT]</argsstring>
        <name>current_dma_buffer</name>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="78" column="18" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="variable" id="data__dispatch_8cpp_1a1e19e3ced4b8b28f478e64d105bf4414" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dma_buffer_sizes[ADC_COUNT]</definition>
        <argsstring>[ADC_COUNT]</argsstring>
        <name>dma_buffer_sizes</name>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="79" column="18" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="variable" id="data__dispatch_8cpp_1a8de43a45aed73f72dcfe6e41044252ca" prot="public" static="yes" mutable="no">
        <type>dispatch_t</type>
        <definition>dispatch_t dispatch_type</definition>
        <argsstring></argsstring>
        <name>dispatch_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="82" column="19" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="82" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="data__dispatch_8cpp_1a9c63194b7c0b5ede6cc91c2d668bafc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_INLINE uint16_t *</type>
        <definition>__STATIC_INLINE uint16_t * _data_dispatch_get_buffer</definition>
        <argsstring>(uint8_t adc_index, uint8_t channel_index)</argsstring>
        <name>_data_dispatch_get_buffer</name>
        <param>
          <type>uint8_t</type>
          <declname>adc_index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="88" column="26" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="88" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="data__dispatch_8cpp_1acd9cebb805dbef07e1490e05ada737e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_INLINE uint32_t</type>
        <definition>__STATIC_INLINE uint32_t _data_dispatch_get_count</definition>
        <argsstring>(uint8_t adc_index, uint8_t channel_index)</argsstring>
        <name>_data_dispatch_get_count</name>
        <param>
          <type>uint8_t</type>
          <declname>adc_index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="94" column="26" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="data__dispatch_8cpp_1afcf77968125069016f99740afa537bce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_INLINE void</type>
        <definition>__STATIC_INLINE void _data_dispatch_increment_count</definition>
        <argsstring>(uint8_t adc_index, uint8_t channel_index)</argsstring>
        <name>_data_dispatch_increment_count</name>
        <param>
          <type>uint8_t</type>
          <declname>adc_index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="99" column="22" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="99" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="data__dispatch_8cpp_1a4ff8fe3af16bcf521bb09be66b296d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_INLINE void</type>
        <definition>__STATIC_INLINE void _data_dispatch_swap_buffers</definition>
        <argsstring>(uint8_t adc_index, uint8_t channel_index)</argsstring>
        <name>_data_dispatch_swap_buffers</name>
        <param>
          <type>uint8_t</type>
          <declname>adc_index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="108" column="22" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="108" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="data__dispatch_8cpp_1afdc22d3be89791538fb7af8c3a8adb68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void data_dispatch_init</definition>
        <argsstring>(dispatch_t dispatch_method, uint32_t repetitions)</argsstring>
        <name>data_dispatch_init</name>
        <param>
          <type>dispatch_t</type>
          <declname>dispatch_method</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>repetitions</declname>
        </param>
        <briefdescription>
<para>Init function to be called first. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispatch_method</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates when the dispatch should be done. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>repetitions</parametername>
</parameternamelist>
<parameterdescription>
<para>If dispatch is done at task start, this value represents the number of acquisitions that are done between two execution of the task. Ignored if dispatch is done on interrupt. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="119" column="6" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="119" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="data__dispatch_8cpp_1aa0e4e10aa8a58911abd5654ccf06d48b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void data_dispatch_do_dispatch</definition>
        <argsstring>(uint8_t adc_num)</argsstring>
        <name>data_dispatch_do_dispatch</name>
        <param>
          <type>uint8_t</type>
          <declname>adc_number</declname>
          <defname>adc_num</defname>
        </param>
        <briefdescription>
<para>Dispatch function: gets the readings and store them in per-channel arrays. This functon is called by DMA callback when the DMA has filled one of its buffers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the ADC from which data comes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="204" column="6" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="204" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="data__dispatch_8cpp_1acefeb0a090afb5be43e2cbae17c0263e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void data_dispatch_do_full_dispatch</definition>
        <argsstring>()</argsstring>
        <name>data_dispatch_do_full_dispatch</name>
        <briefdescription>
<para>Function to proceed to all chanels dispatch when it is done at uninterruptible task start. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="270" column="6" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="270" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="data__dispatch_8cpp_1a60c7faf2a9c6784fda863ebf8d564301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t *</type>
        <definition>uint16_t * data_dispatch_get_acquired_values</definition>
        <argsstring>(uint8_t adc_number, uint8_t channel_rank, uint32_t &amp;number_of_values_acquired)</argsstring>
        <name>data_dispatch_get_acquired_values</name>
        <param>
          <type>uint8_t</type>
          <declname>adc_number</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel_rank</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>number_of_values_acquired</declname>
        </param>
        <briefdescription>
<para>Obtain data for a specific channel. The data is provided as an array of values and the count of data in this buffer is returned as an output parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the ADC from which to obtain data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>Rank of the channel from which to obtain data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_values_acquired</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter: address to a variable that will be updated by the function with the data count. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Buffer containing the available data. Note that the returned buffer is invalidated by further calls to the function with same adc number/channel rank. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="282" column="10" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="282" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="data__dispatch_8cpp_1ac9d1c5171b4f3bb37046bde6c0b58777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t data_dispatch_peek_acquired_value</definition>
        <argsstring>(uint8_t adc_number, uint8_t channel_rank)</argsstring>
        <name>data_dispatch_peek_acquired_value</name>
        <param>
          <type>uint8_t</type>
          <declname>adc_number</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel_rank</declname>
        </param>
        <briefdescription>
<para>Peek data for a specific channel: obtain the latest value from the channel without removing it from the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the ADC from which to obtain data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>Rank of the channel from which to obtain data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Latest available value from the buffer. Note that if no value has been acquired, returned value will be 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" line="313" column="10" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp" bodystart="313" bodyend="337"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021-2023<sp/>LAAS-CNRS</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;https://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>LGPL-2.1</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stdlib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//Zephyr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr/kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OwnTech<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SpinAPI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Current<sp/>module<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dma.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Current<sp/>file<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;data_dispatch.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>channels<sp/>in<sp/>each<sp/>ADC<sp/>(cell<sp/>i<sp/>is<sp/>ADC<sp/>number<sp/>i+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t*<sp/>enabled_channels_count<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Array<sp/>of<sp/>per-adc/per-channel<sp/>buffers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>adc_channel_buffers[x][y][z][]<sp/>is<sp/>ADC<sp/>x+1<sp/>channel<sp/>y<sp/>buffer<sp/>z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>z<sp/>either<sp/>0<sp/>or<sp/>1<sp/>as<sp/>there<sp/>are<sp/>two<sp/>buffers<sp/>per<sp/>channel<sp/>(double<sp/>buffering)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t****<sp/>adc_channel_buffers<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>readings<sp/>stored<sp/>in<sp/>each<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffers_data_count[x][y]<sp/>is<sp/>the<sp/>current<sp/>nuumber<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>values<sp/>stored<sp/>in<sp/>the<sp/>currently<sp/>written<sp/>buffer<sp/>of<sp/>ADC<sp/>x+1<sp/>Channel<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t**<sp/>buffers_data_count<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Currently<sp/>written<sp/>buffer<sp/>for<sp/>each<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Either<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>current_buffer[x][y]<sp/>is<sp/>0,<sp/>the<sp/>currently<sp/>written<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>ADC<sp/>x+1<sp/>Channel<sp/>y<sp/>is<sp/>buffer<sp/>0<sp/>and<sp/>the<sp/>user<sp/>buffer<sp/>is<sp/>buffer<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t**<sp/>current_buffer<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Small<sp/>memory<sp/>to<sp/>retain<sp/>latest<sp/>value<sp/>available<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>peek()<sp/>function<sp/>after<sp/>a<sp/>buffer<sp/>swap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t**<sp/>peek_memory<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DMA<sp/>buffers:<sp/>data<sp/>from<sp/>the<sp/>ADC<sp/>1/2<sp/>are<sp/>stored<sp/>in<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffers<sp/>until<sp/>dispatch<sp/>is<sp/>done<sp/>(ADC<sp/>3/4<sp/>won&apos;t<sp/>use<sp/>DMA).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Main<sp/>buffers<sp/>are<sp/>always<sp/>used,<sp/>while<sp/>secondary<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>only<sp/>be<sp/>used<sp/>when<sp/>double-buffering<sp/>is<sp/>activated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Double<sp/>buffering<sp/>is<sp/>activated<sp/>in<sp/>Interrupt<sp/>mode,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>while<sp/>Task<sp/>mode<sp/>doesn&apos;t<sp/>need<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t*<sp/>dma_main_buffers[ADC_COUNT]<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t*<sp/>dma_secondary_buffers[ADC_COUNT]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/><sp/><sp/>current_dma_buffer[ADC_COUNT]<sp/><sp/><sp/><sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>dma_buffer_sizes[ADC_COUNT]<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dispatch<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>dispatch_t<sp/>dispatch_type;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Private<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">__STATIC_INLINE<sp/>uint16_t*<sp/>_data_dispatch_get_buffer(uint8_t<sp/>adc_index,<sp/>uint8_t<sp/>channel_index)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>active_buffer<sp/>=<sp/>current_buffer[adc_index][channel_index];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>adc_channel_buffers[adc_index][channel_index][active_buffer];</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">__STATIC_INLINE<sp/>uint32_t<sp/>_data_dispatch_get_count(uint8_t<sp/>adc_index,<sp/>uint8_t<sp/>channel_index)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffers_data_count[adc_index][channel_index];</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_data_dispatch_increment_count(uint8_t<sp/>adc_index,<sp/>uint8_t<sp/>channel_index)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/>current_count<sp/>=<sp/>&amp;buffers_data_count[adc_index][channel_index];</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(*current_count)<sp/>&lt;<sp/>CHANNELS_BUFFERS_SIZE)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*current_count)++;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_data_dispatch_swap_buffers(uint8_t<sp/>adc_index,<sp/>uint8_t<sp/>channel_index)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>active_buffer<sp/>=<sp/>&amp;current_buffer[adc_index][channel_index];</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>*active_buffer<sp/>=<sp/>((*active_buffer)<sp/>==<sp/>0)<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>buffers_data_count[adc_index][channel_index]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Public<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>data_dispatch_init(dispatch_t<sp/>dispatch_method,<sp/>uint32_t<sp/>repetitions)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>dispatch<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>dispatch_type<sp/>=<sp/>dispatch_method;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>arrays<sp/>for<sp/>each<sp/>ADC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>enabled_channels_count<sp/>=<sp/>(uint8_t*)<sp/><sp/><sp/><sp/>k_malloc(ADC_COUNT<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>adc_channel_buffers<sp/><sp/><sp/><sp/>=<sp/>(uint16_t****)k_calloc(ADC_COUNT,<sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t***));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>buffers_data_count<sp/><sp/><sp/><sp/><sp/>=<sp/>(uint32_t**)<sp/><sp/>k_calloc(ADC_COUNT,<sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t*));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>current_buffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint8_t**)<sp/><sp/><sp/>k_calloc(ADC_COUNT,<sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t*));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>peek_memory<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t**)<sp/><sp/>k_calloc(ADC_COUNT,<sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t*));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>DMA<sp/>1<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>adc_num<sp/>=<sp/>1<sp/>;<sp/>adc_num<sp/>&lt;=<sp/>ADC_COUNT<sp/>;<sp/>adc_num++)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>adc_index<sp/>=<sp/>adc_num-1;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enabled_channels_count[adc_index]<sp/>=<sp/>adc_get_enabled_channels_count(adc_num);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>this<sp/>ADC<sp/>if<sp/>it<sp/>has<sp/>no<sp/>enabled<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enabled_channels_count[adc_index]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>buffers<sp/>for<sp/>DMA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dma_buffer_size;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dispatch_type<sp/>==<sp/>interrupt)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dma_buffer_size<sp/>=<sp/>enabled_channels_count[adc_index];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DMA<sp/>double-buffering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dma_buffer_size<sp/>=<sp/>dma_buffer_size<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dma_buffer_size<sp/>=<sp/>repetitions;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>buffer<sp/>size<sp/>is<sp/>a<sp/>multiple<sp/>of<sp/>enabled<sp/>channels<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>that<sp/>each<sp/>channel<sp/>data<sp/>will<sp/>always<sp/>be<sp/>at<sp/>the<sp/>same<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(repetitions<sp/>%<sp/>enabled_channels_count[adc_index]<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dma_buffer_size<sp/>+=<sp/>enabled_channels_count[adc_index]<sp/>-<sp/>(repetitions<sp/>%<sp/>enabled_channels_count[adc_index]);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>room<sp/>for<sp/>one<sp/>additional<sp/>measure<sp/>per<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>prevents<sp/>DMA<sp/>buffer<sp/>to<sp/>do<sp/>exactly<sp/>one<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>between<sp/>two<sp/>tasks<sp/>calls,<sp/>to<sp/>prevent<sp/>edge<sp/>cases<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>acquired<sp/>data<sp/>count<sp/>computation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dma_buffer_size<sp/>+=<sp/>enabled_channels_count[adc_index];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dma_buffer_sizes[adc_index]<sp/>=<sp/>dma_buffer_size;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dma_main_buffers[adc_index]<sp/>=<sp/>(uint16_t*)k_malloc(dma_buffer_size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dispatch_type<sp/>==<sp/>interrupt)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dma_secondary_buffers[adc_index]<sp/>=<sp/>dma_main_buffers[adc_index]<sp/>+<sp/>enabled_channels_count[adc_index];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>DMA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>disable_interrupts<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dispatch_type<sp/>==<sp/>task)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disable_interrupts<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dma_configure_adc_acquisition(adc_num,<sp/>disable_interrupts,<sp/>dma_main_buffers[adc_index],<sp/>dma_buffer_size);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>arrays<sp/>for<sp/>each<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_channel_buffers[adc_index]<sp/>=<sp/>(uint16_t***)k_malloc(enabled_channels_count[adc_index]<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t**));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffers_data_count[adc_index]<sp/>=<sp/>(uint32_t*)k_calloc(enabled_channels_count[adc_index],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_buffer[adc_index]<sp/><sp/><sp/><sp/><sp/>=<sp/>(uint8_t*)<sp/>k_calloc(enabled_channels_count[adc_index],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>peek_memory[adc_index]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t*)k_calloc(enabled_channels_count[adc_index],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel_index<sp/>=<sp/>0<sp/>;<sp/>channel_index<sp/>&lt;<sp/>enabled_channels_count[adc_index]<sp/>;<sp/>channel_index++)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>double<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_channel_buffers[adc_index][channel_index]<sp/>=<sp/>(uint16_t**)k_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t*)<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_channel_buffers[adc_index][channel_index][0]<sp/>=<sp/>(uint16_t*)k_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t)<sp/>*<sp/>CHANNELS_BUFFERS_SIZE);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_channel_buffers[adc_index][channel_index][1]<sp/>=<sp/>(uint16_t*)k_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t)<sp/>*<sp/>CHANNELS_BUFFERS_SIZE);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>peek_memory[adc_index][channel_index]<sp/>=<sp/>PEEK_NO_VALUE;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>data_dispatch_do_dispatch(uint8_t<sp/>adc_num)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>adc_index<sp/>=<sp/>adc_num<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enabled_channels_count[adc_index]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t*<sp/>dma_buffer<sp/>=<sp/>dma_main_buffers[adc_index];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dma_secondary_buffers[adc_index]<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_dma_buffer[adc_index]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_dma_buffer[adc_index]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dma_buffer<sp/>=<sp/>dma_secondary_buffers[adc_index];</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_dma_buffer[adc_index]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>data_count_in_dma_buffer;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dispatch_type<sp/>==<sp/>interrupt)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_count_in_dma_buffer<sp/>=<sp/>enabled_channels_count[adc_index];</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_count_in_dma_buffer<sp/>=<sp/>dma_get_retreived_data_count(adc_num);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dma_index<sp/>=<sp/>0<sp/>;<sp/>dma_index<sp/>&lt;<sp/>data_count_in_dma_buffer<sp/>;<sp/>dma_index++)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dma_buffer_index;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dispatch_type<sp/>==<sp/>interrupt)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dma_buffer_index<sp/>=<sp/>dma_index<sp/>%<sp/>enabled_channels_count[adc_index];</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>next_dma_buffer_index[ADC_COUNT]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dma_buffer_index<sp/>=<sp/>next_dma_buffer_index[adc_index];</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_dma_buffer_index[adc_index]<sp/>&lt;<sp/>dma_buffer_sizes[adc_index]-1)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_dma_buffer_index[adc_index]++;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_dma_buffer_index[adc_index]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>info<sp/>on<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>channel_index<sp/>=<sp/>dma_buffer_index<sp/>%<sp/>enabled_channels_count[adc_index];</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t*<sp/>active_buffer<sp/>=<sp/>_data_dispatch_get_buffer(adc_index,<sp/>channel_index);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/>current_count<sp/>=<sp/>_data_dispatch_get_count(adc_index,<sp/>channel_index);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_buffer[current_count]<sp/>=<sp/>dma_buffer[dma_buffer_index];</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_data_dispatch_increment_count(adc_index,<sp/>channel_index);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>data_dispatch_do_full_dispatch()</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>adc_num<sp/>=<sp/>1<sp/>;<sp/>adc_num<sp/>&lt;=<sp/>ADC_COUNT<sp/>;<sp/>adc_num++)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_dispatch_do_dispatch(adc_num);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Accessors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">uint16_t*<sp/>data_dispatch_get_acquired_values(uint8_t<sp/>adc_number,<sp/>uint8_t<sp/>channel_rank,<sp/>uint32_t&amp;<sp/>number_of_values_acquired)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>number_of_values_acquired<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>adc_index<sp/>=<sp/>adc_number-1;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adc_index<sp/>&gt;=<sp/>ADC_COUNT)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>and<sp/>check<sp/>data<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>channel_index<sp/>=<sp/>channel_rank-1;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>current_count<sp/>=<sp/>_data_dispatch_get_count(adc_index,<sp/>channel_index);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_count<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>and<sp/>swap<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t*<sp/>active_buffer<sp/>=<sp/>_data_dispatch_get_buffer(adc_index,<sp/>channel_index);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>_data_dispatch_swap_buffers(adc_index,<sp/>channel_index);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retain<sp/>latest<sp/>value<sp/>for<sp/>peek()<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_count<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>peek_memory[adc_index][channel_index]<sp/>=<sp/>active_buffer[current_count-1];</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>number_of_values_acquired<sp/>=<sp/>current_count;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>active_buffer;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">uint16_t<sp/>data_dispatch_peek_acquired_value(uint8_t<sp/>adc_number,<sp/>uint8_t<sp/>channel_rank)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>adc_index<sp/>=<sp/>adc_number-1;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>channel_index<sp/>=<sp/>channel_rank-1;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adc_index<sp/>&lt;<sp/>ADC_COUNT)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>info<sp/>on<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t*<sp/>active_buffer<sp/>=<sp/>_data_dispatch_get_buffer(adc_index,<sp/>channel_index);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/>current_count<sp/>=<sp/>_data_dispatch_get_count(adc_index,<sp/>channel_index);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_count<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>active_buffer[current_count-1];</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>peek_memory[adc_index][channel_index];</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/data/data_dispatch.cpp"/>
  </compounddef>
</doxygen>
