<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="Rs485_8cpp" kind="file" language="C++">
    <compoundname>Rs485.cpp</compoundname>
    <sectiondef kind="var">
      <memberdef kind="variable" id="Rs485_8cpp_1a1522a7ea5fc08dd46ccd4a007dcaaa14" prot="public" static="yes" mutable="no">
        <type>const struct device *</type>
        <definition>const struct device* dma1</definition>
        <argsstring></argsstring>
        <name>dma1</name>
        <initializer>= DEVICE_DT_GET(DT_NODELABEL(dma1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="57" column="26" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Rs485_8cpp_1a660f23134aaae43c9ff2c6096fa59342" prot="public" static="yes" mutable="no">
        <type>const struct device *</type>
        <definition>const struct device* uart_dev</definition>
        <argsstring></argsstring>
        <name>uart_dev</name>
        <initializer>= DEVICE_DT_GET(DT_NODELABEL(usart3))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="58" column="26" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Rs485_8cpp_1ac6e5ec63505c02923d71f7409cdbf1d1" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t baud</definition>
        <argsstring></argsstring>
        <name>baud</name>
        <initializer>= 21250000 / (2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="61" column="17" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Rs485_8cpp_1a91929346f2da2b0eabab98fc63d7a784" prot="public" static="no" mutable="no">
        <type>struct uart_config</type>
        <definition>struct uart_config uart_cfg</definition>
        <argsstring></argsstring>
        <name>uart_cfg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="62" column="18" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Rs485_8cpp_1a950a63aa8b272adabdea60d860f0d72b" prot="public" static="no" mutable="no">
        <type>struct uart_event</type>
        <definition>struct uart_event evt</definition>
        <argsstring></argsstring>
        <name>evt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="63" column="17" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Rs485_8cpp_1adced12bc3a14a3d1e7f19b64458b7c84" prot="public" static="yes" mutable="no">
        <type>uint8_t *</type>
        <definition>uint8_t* tx_usart_val</definition>
        <argsstring></argsstring>
        <name>tx_usart_val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="66" column="16" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Rs485_8cpp_1a4813bf81dd4ea05bc70a1dea08c60f1c" prot="public" static="yes" mutable="no">
        <type>uint8_t *</type>
        <definition>uint8_t* rx_usart_val</definition>
        <argsstring></argsstring>
        <name>rx_usart_val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="67" column="16" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Rs485_8cpp_1afb3178a9e0a7c109caf6346ca2433d1c" prot="public" static="yes" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dma_buffer_size</definition>
        <argsstring></argsstring>
        <name>dma_buffer_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="69" column="17" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Rs485_8cpp_1ace668072b9f944d7d7294eba42be3a68" prot="public" static="yes" mutable="no">
        <type>dma_callbackRXfunc_t</type>
        <definition>dma_callbackRXfunc_t user_fnc</definition>
        <argsstring></argsstring>
        <name>user_fnc</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="71" column="29" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="71" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="Rs485_8cpp_1a11c5b78ad503754a30fd50db2dbeb498" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dma_callback_tx</definition>
        <argsstring>(const struct device *dev, void *user_data, uint32_t channel, int status)</argsstring>
        <name>_dma_callback_tx</name>
        <param>
          <type>const struct device *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DMA callback TX clear transmission flag, and disabled DMA channel TX. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="78" column="13" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="Rs485_8cpp_1a8cddf24349fc5aa14a8e2747a915b620" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dma_callback_rx</definition>
        <argsstring>()</argsstring>
        <name>_dma_callback_rx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DMA callback RX clear reception flag, then call user functions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="90" column="13" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="90" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="Rs485_8cpp_1a5d066d95610ea1e27833867ff083e12d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_usrBuffer</definition>
        <argsstring>(uint8_t *tx_buffer, uint8_t *rx_buffer)</argsstring>
        <name>init_usrBuffer</name>
        <param>
          <type>uint8_t *</type>
          <declname>tx_buffer</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>rx_buffer</declname>
        </param>
        <briefdescription>
<para>initialize user transmission and reception buffer </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize RX and TX buffer by user </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="104" column="6" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="Rs485_8cpp_1a7115860f6e25772ee9f1614b3f982af4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_usrFunc</definition>
        <argsstring>(dma_callbackRXfunc_t fnc_callback)</argsstring>
        <name>init_usrFunc</name>
        <param>
          <type>dma_callbackRXfunc_t</type>
          <declname>fnc_callback</declname>
        </param>
        <briefdescription>
<para>initialize user function called every RX callback </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize usr function to use in the RX callback </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="113" column="6" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="Rs485_8cpp_1a0302f6f8be960d4b1722a08242ce1e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_usrBaudrate</definition>
        <argsstring>(uint32_t usr_baud)</argsstring>
        <name>init_usrBaudrate</name>
        <param>
          <type>uint32_t</type>
          <declname>usr_baud</declname>
        </param>
        <briefdescription>
<para>initialize baudrate with user choice. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize baudrate by user </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="121" column="6" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="Rs485_8cpp_1ac0891bdebe8644f9b55a6fc85a10e266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_usrDataSize</definition>
        <argsstring>(uint16_t size)</argsstring>
        <name>init_usrDataSize</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>initialize DMA data size to send and receive </para>
        </briefdescription>
        <detaileddescription>
<para>Set the size of data we send ie. the number of bytes. eg. : size = 5 means that we send 5 byte (40 bits) of data to USART 3. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="130" column="6" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="Rs485_8cpp_1ad2b461e9e9044364a28a61cfadcacdd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void serial_init</definition>
        <argsstring>(void)</argsstring>
        <name>serial_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>initialize USART3 </para>
        </briefdescription>
        <detaileddescription>
<para>This function initialise USART3 peripheral </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="138" column="6" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="138" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="Rs485_8cpp_1a3b61150f56af811db20aebc42520d68c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_DEmode</definition>
        <argsstring>(void)</argsstring>
        <name>init_DEmode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>initialize Driver Enable mode for RS485 hardware flowcontrol. pin B14 is set to level high when data is transmitted. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize driver enable mode for RS485 flowcontrol. See RM0440 37.5.20 for more details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="168" column="6" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="168" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="Rs485_8cpp_1a22357a681569af28487cc8d1a908ace7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void oversamp_set</definition>
        <argsstring>(usart_oversampling_t oversampling)</argsstring>
        <name>oversamp_set</name>
        <param>
          <type>usart_oversampling_t</type>
          <declname>oversampling</declname>
        </param>
        <briefdescription>
<para>set oversampling which is by default oversampling_16. With oversampling_8 we increase speed by 2 but decrease USART sampling by half making it more sensitive to noise. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the oversampling. See RM0440 37.5.7 for more details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="201" column="6" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="201" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="Rs485_8cpp_1a0083e1bff2f5762c1d62f095dfe3cf57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dma_channel_init_tx</definition>
        <argsstring>()</argsstring>
        <name>dma_channel_init_tx</name>
        <briefdescription>
<para>initialize dma 1 channel 6 for sending data via USART3. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the TX dma channel initialization. The channel is not enabled here to avoid sending data unexpectedly, this channel is enabled only with serial_tx_on when data must be sent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="213" column="6" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="213" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="Rs485_8cpp_1a2bf2bf6b8b442c052d4ef632c75ded4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dma_channel_init_rx</definition>
        <argsstring>()</argsstring>
        <name>dma_channel_init_rx</name>
        <briefdescription>
<para>initialize dma 1 channel 7 for receiving data in circular mode </para>
        </briefdescription>
        <detaileddescription>
<para>DMA channel RX initialization, this channel is set on circular mode. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="256" column="6" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="256" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="Rs485_8cpp_1aada3b05e1cf82e4472a630b14c21c2c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void serial_tx_on</definition>
        <argsstring>()</argsstring>
        <name>serial_tx_on</name>
        <briefdescription>
<para>reload dma buffer TX </para>
        </briefdescription>
        <detaileddescription>
<para>Reload DMA TX buffer. This functions enable TX channel to start sending the datas </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="298" column="6" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="298" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="Rs485_8cpp_1a2b5aea984524ec850aae2fa26b0a4aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void serial_stop</definition>
        <argsstring>()</argsstring>
        <name>serial_stop</name>
        <briefdescription>
<para>disable usart </para>
        </briefdescription>
        <detaileddescription>
<para>to stop communication </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="314" column="6" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="314" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="Rs485_8cpp_1a2babcdfe166236440ec866cc9eba19d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void serial_start</definition>
        <argsstring>()</argsstring>
        <name>serial_start</name>
        <briefdescription>
<para>enable usart </para>
        </briefdescription>
        <detaileddescription>
<para>to start or restart communication </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" line="322" column="6" bodyfile="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp" bodystart="322" bodyend="325"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>LAAS-CNRS</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;https://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>LGPL-2.1</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ll<sp/>drivers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stm32_ll_dma.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stm32_ll_gpio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stm32_ll_bus.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Zephyr<sp/>drivers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr/drivers/uart.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr/drivers/dma.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Rs485.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_USART<sp/>DMA1<sp/></highlight><highlight class="comment">//<sp/>DMA<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STM32_DMA_HAL_OVERRIDE<sp/>0x7F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Warning<sp/>:<sp/>if<sp/>you<sp/>change<sp/>the<sp/>channels<sp/>number,<sp/>you&apos;ll<sp/>have<sp/>to<sp/>change<sp/>some<sp/>code<sp/>line<sp/>manually*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_DMA_CHANNEL_TX<sp/>6<sp/></highlight><highlight class="comment">//<sp/>transmission<sp/>dma<sp/>channel<sp/>for<sp/>zephyr<sp/>driver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_DMA_CHANNEL_RX<sp/>7<sp/></highlight><highlight class="comment">//<sp/>reception<sp/>dma<sp/>channel<sp/>for<sp/>zephyr<sp/>driver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Warning<sp/>:<sp/>if<sp/>you<sp/>change<sp/>the<sp/>channels,<sp/>you&apos;ll<sp/>have<sp/>to<sp/>change<sp/>some<sp/>code<sp/>line<sp/>manually*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LL_DMA_CHANNEL_TX<sp/>LL_DMA_CHANNEL_6<sp/></highlight><highlight class="comment">//<sp/>transmission<sp/>dma<sp/>channel<sp/>for<sp/>LL<sp/>driver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LL_DMA_CHANNEL_RX<sp/>LL_DMA_CHANNEL_7<sp/></highlight><highlight class="comment">//<sp/>reception<sp/>dma<sp/>channel<sp/>for<sp/>LL<sp/>driver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>DT<sp/>definitions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">device<sp/>*dma1<sp/>=<sp/>DEVICE_DT_GET(DT_NODELABEL(dma1));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">device<sp/>*uart_dev<sp/>=<sp/>DEVICE_DT_GET(DT_NODELABEL(usart3));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>USART<sp/>initialization<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>baud<sp/>=<sp/>21250000<sp/>/<sp/>(2);<sp/></highlight><highlight class="comment">/*<sp/>initial<sp/>baudrate<sp/>to<sp/><sp/>10.625Mhz<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">uart_config<sp/>uart_cfg;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">uart_event<sp/>evt;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>DMA<sp/>buffer<sp/>for<sp/>transmission<sp/>and<sp/>reception<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t*<sp/>tx_usart_val;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t*<sp/>rx_usart_val;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/>dma_buffer_size;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>dma_callbackRXfunc_t<sp/>user_fnc<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>user<sp/>function<sp/>to<sp/>call<sp/>in<sp/>RX<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_dma_callback_tx(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>device<sp/>*dev,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_data,<sp/>uint32_t<sp/>channel,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_DisableChannel(DMA_USART,<sp/>LL_DMA_CHANNEL_TX);<sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>DMA<sp/>channel<sp/>after<sp/>sending<sp/>datas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_ClearFlag_TXFE(USART3);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_ClearFlag_TC(USART3);<sp/></highlight><highlight class="comment">//<sp/>clear<sp/>transmission<sp/>complete<sp/>flag<sp/>USART</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_ClearFlag_TC6(DMA_USART);<sp/></highlight><highlight class="comment">//<sp/>clear<sp/>transmission<sp/>complete<sp/>dma<sp/>channel<sp/>TX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_dma_callback_rx()</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_ClearFlag_TC7(DMA_USART);<sp/></highlight><highlight class="comment">//<sp/>clear<sp/>transmission<sp/>complete<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(user_fnc<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user_fnc();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_usrBuffer(uint8_t*<sp/>tx_buffer,<sp/>uint8_t*<sp/>rx_buffer)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_usart_val<sp/>=<sp/>tx_buffer;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>rx_usart_val<sp/>=<sp/>rx_buffer;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_usrFunc(dma_callbackRXfunc_t<sp/>fnc_callback)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>user_fnc<sp/>=<sp/>fnc_callback;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_usrBaudrate(uint32_t<sp/>usr_baud)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>baud<sp/>=<sp/>usr_baud;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_usrDataSize(uint16_t<sp/>size)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>dma_buffer_size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serial_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_config_get(uart_dev,<sp/>&amp;uart_cfg);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_cfg.baudrate<sp/>=<sp/>baud;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_cfg.flow_ctrl<sp/>=<sp/>UART_CFG_FLOW_CTRL_NONE;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_cfg.data_bits<sp/>=<sp/>UART_CFG_DATA_BITS_8;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_cfg.parity<sp/>=<sp/>UART_CFG_PARITY_NONE;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_cfg.stop_bits<sp/>=<sp/>UART_CFG_STOP_BITS_1;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_configure(uart_dev,<sp/>&amp;uart_cfg);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_ConfigAsyncMode(USART3);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>DMA<sp/>request*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_EnableDMAReq_TX(USART3);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_EnableDMAReq_RX(USART3);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>Interrupts<sp/>for<sp/>TX<sp/>(not<sp/>used<sp/>for<sp/>DMA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_DisableIT_TC(USART3);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>Transmission<sp/>Complete<sp/>Interrupt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_DisableIT_TXE_TXFNF(USART3);<sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>Transmission<sp/>Data<sp/>Register<sp/>Empty<sp/>Interrupt<sp/>for<sp/>DMA<sp/>to<sp/>provide<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>disable<sp/>interrupts<sp/>for<sp/>RX<sp/>(not<sp/>used<sp/>with<sp/>DMA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_DisableIT_RXNE_RXFNE(USART3);<sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>Receiver<sp/>Data<sp/>Register<sp/>Not<sp/>Empty<sp/>Interrupt<sp/>for<sp/>DMA<sp/>to<sp/>fetch<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_Enable(USART3);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_DEmode(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_Disable(USART3);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_GPIO_InitTypeDef<sp/>GPIO_InitStruct<sp/>=<sp/>{0};<sp/></highlight><highlight class="comment">//<sp/>GPIO<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);<sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>GPIO<sp/>clock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>GPIO_InitStruct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>GPIO_InitStruct.Pin<sp/>=<sp/>LL_GPIO_PIN_14;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>GPIO_InitStruct.Mode<sp/>=<sp/>LL_GPIO_MODE_ALTERNATE;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>GPIO_InitStruct.Speed<sp/>=<sp/>LL_GPIO_SPEED_FREQ_LOW;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>GPIO_InitStruct.OutputType<sp/>=<sp/>LL_GPIO_OUTPUT_PUSHPULL;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>GPIO_InitStruct.Pull<sp/>=<sp/>LL_GPIO_PULL_NO;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>GPIO_InitStruct.Alternate<sp/>=<sp/>LL_GPIO_AF_7;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_GPIO_Init(GPIOB,<sp/>&amp;GPIO_InitStruct);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_EnableDEMode(USART3);<sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>DE<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_SetDESignalPolarity(USART3,<sp/>LL_USART_DE_POLARITY_HIGH);<sp/></highlight><highlight class="comment">//<sp/>Polarity<sp/>is<sp/>high<sp/>ie.<sp/>PB14<sp/>will<sp/>be<sp/>at<sp/>high<sp/>level<sp/>when<sp/>sending<sp/>datas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Assertion<sp/>time<sp/>is<sp/>set<sp/>to<sp/>maximum<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_SetDEAssertionTime(USART3,<sp/>31);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_SetDEDeassertionTime(USART3,<sp/>31);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_Enable(USART3);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>oversamp_set(usart_oversampling_t<sp/>oversampling)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_Disable(USART3);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_SetOverSampling(USART3,<sp/>oversampling);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_Enable(USART3);</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dma_channel_init_tx()</highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Configure<sp/>DMA<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dma_config<sp/>dma_config_s<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_InitTypeDef<sp/>DMA_InitStruct<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>dma_config_s.dma_callback<sp/>=<sp/>_dma_callback_tx;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>dma_config_s.linked_channel<sp/>=<sp/>STM32_DMA_HAL_OVERRIDE;<sp/><sp/></highlight><highlight class="comment">//<sp/>Hal<sp/>override</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DMA<sp/>configuration<sp/>with<sp/>LL<sp/>drivers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.Direction<sp/>=<sp/>LL_DMA_DIRECTION_MEMORY_TO_PERIPH;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.PeriphOrM2MSrcAddress<sp/>=<sp/>(uint32_t)(&amp;(USART3-&gt;TDR));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.MemoryOrM2MDstAddress<sp/>=<sp/>(uint32_t)(tx_usart_val);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.Mode<sp/>=<sp/>LL_DMA_MODE_NORMAL;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.MemoryOrM2MDstDataSize<sp/>=<sp/>LL_DMA_MDATAALIGN_BYTE;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.PeriphOrM2MSrcDataSize<sp/>=<sp/>LL_DMA_PDATAALIGN_BYTE;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.PeriphOrM2MSrcIncMode<sp/>=<sp/>LL_DMA_PERIPH_NOINCREMENT;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.MemoryOrM2MDstIncMode<sp/>=<sp/>LL_DMA_MEMORY_INCREMENT;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.PeriphRequest<sp/>=<sp/>LL_DMAMUX_REQ_USART3_TX;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.NbData<sp/>=<sp/>dma_buffer_size;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>dma_config(dma1,<sp/>ZEPHYR_DMA_CHANNEL_TX,<sp/>&amp;dma_config_s);<sp/></highlight><highlight class="comment">//<sp/>Indicates<sp/>Callback<sp/>function<sp/>to<sp/>zephyr<sp/>driver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_DisableChannel(DMA_USART,<sp/>LL_DMA_CHANNEL_TX);<sp/></highlight><highlight class="comment">//<sp/>Disabling<sp/>channel<sp/>for<sp/>initial<sp/>set-up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>DMA<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_SetDataLength(DMA_USART,<sp/>LL_DMA_CHANNEL_TX,<sp/>dma_buffer_size);<sp/></highlight><highlight class="comment">//<sp/>DMA<sp/>data<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_SetChannelPriorityLevel(DMA_USART,<sp/>LL_DMA_CHANNEL_TX,<sp/>LL_DMA_PRIORITY_VERYHIGH);<sp/></highlight><highlight class="comment">//<sp/>DMA<sp/>channel<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_Init(DMA_USART,<sp/>LL_DMA_CHANNEL_TX,<sp/>&amp;DMA_InitStruct);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clearing<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_ClearFlag_TC6(DMA_USART);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_ClearFlag_HT6(DMA_USART);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_EnableIT_TC(DMA_USART,<sp/>LL_DMA_CHANNEL_TX);<sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>transfert<sp/>complete<sp/>interruption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_DisableIT_HT(DMA_USART,<sp/>LL_DMA_CHANNEL_TX);<sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>half-transfert<sp/>interruption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dma_channel_init_rx()</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>DMA<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_InitTypeDef<sp/>DMA_InitStruct<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialization<sp/>of<sp/>DMA<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.Direction<sp/>=<sp/>LL_DMA_DIRECTION_PERIPH_TO_MEMORY;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.PeriphOrM2MSrcAddress<sp/>=<sp/>(uint32_t)(&amp;(USART3-&gt;RDR));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.MemoryOrM2MDstAddress<sp/>=<sp/>(uint32_t)(rx_usart_val);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.Mode<sp/>=<sp/>LL_DMA_MODE_CIRCULAR;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.MemoryOrM2MDstDataSize<sp/>=<sp/>LL_DMA_MDATAALIGN_BYTE;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.PeriphOrM2MSrcDataSize<sp/>=<sp/>LL_DMA_PDATAALIGN_BYTE;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.PeriphOrM2MSrcIncMode<sp/>=<sp/>LL_DMA_PERIPH_NOINCREMENT;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.MemoryOrM2MDstIncMode<sp/>=<sp/>LL_DMA_MEMORY_INCREMENT;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.PeriphRequest<sp/>=<sp/>LL_DMAMUX_REQ_USART3_RX;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>DMA_InitStruct.NbData<sp/>=<sp/>dma_buffer_size;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>IRQ_DIRECT_CONNECT(17,<sp/>0,<sp/>_dma_callback_rx,<sp/>IRQ_ZERO_LATENCY);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>irq_enable(17);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_DisableChannel(DMA_USART,<sp/>LL_DMA_CHANNEL_RX);<sp/></highlight><highlight class="comment">//<sp/>Disabling<sp/>channel<sp/>for<sp/>initial<sp/>set-up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>DMA<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_SetDataLength(DMA_USART,<sp/>LL_DMA_CHANNEL_RX,<sp/>dma_buffer_size);<sp/></highlight><highlight class="comment">//<sp/>DMA<sp/>data<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_SetChannelPriorityLevel(DMA_USART,<sp/>LL_DMA_CHANNEL_RX,<sp/>LL_DMA_PRIORITY_VERYHIGH);<sp/></highlight><highlight class="comment">//<sp/>DMA<sp/>channel<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_Init(DMA_USART,<sp/>LL_DMA_CHANNEL_RX,<sp/>&amp;DMA_InitStruct);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clearing<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_ClearFlag_TC7(DMA_USART);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_ClearFlag_HT7(DMA_USART);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_EnableChannel(DMA_USART,<sp/>LL_DMA_CHANNEL_RX);<sp/></highlight><highlight class="comment">//<sp/>Enabling<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_EnableIT_TC(DMA_USART,<sp/>LL_DMA_CHANNEL_RX);<sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>transfert<sp/>complete<sp/>interruption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_DisableIT_HT(DMA_USART,<sp/>LL_DMA_CHANNEL_RX);<sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>half-transfert<sp/>interruption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serial_tx_on()</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_ClearFlag_TC6(DMA_USART);<sp/></highlight><highlight class="comment">//<sp/>Making<sp/>sure<sp/>the<sp/>flag<sp/>is<sp/>cleared<sp/>before<sp/>transmission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_DisableChannel(DMA_USART,<sp/>LL_DMA_CHANNEL_TX);<sp/></highlight><highlight class="comment">//<sp/>disable<sp/>channel<sp/>to<sp/>reload<sp/>TX<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reloading<sp/>TX<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_SetMemoryAddress(DMA_USART,<sp/>LL_DMA_CHANNEL_TX,<sp/>(uint32_t)(tx_usart_val));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_SetDataLength(DMA_USART,<sp/>LL_DMA_CHANNEL_TX,<sp/>dma_buffer_size);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_DMA_EnableChannel(DMA_USART,<sp/>LL_DMA_CHANNEL_TX);<sp/></highlight><highlight class="comment">//<sp/>re-enable<sp/>the<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serial_stop()</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_Disable(USART3);</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serial_start()</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>LL_USART_Enable(USART3);</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="docs/core/zephyr/modules/owntech_communication/zephyr/src/Rs485.cpp"/>
  </compounddef>
</doxygen>
