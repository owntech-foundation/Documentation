<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classPwmHAL" kind="class" language="C++" prot="public">
    <compoundname>PwmHAL</compoundname>
    <includes refid="PwmHAL_8h" local="no">PwmHAL.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPwmHAL_1a754756b12d99c2f349ca9133f65f66d3" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool PwmHAL::swap_state[HRTIM_CHANNELS]</definition>
        <argsstring>[HRTIM_CHANNELS]</argsstring>
        <name>swap_state</name>
        <qualifiedname>PwmHAL::swap_state</qualifiedname>
        <initializer>= {false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="552" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" bodystart="552" bodyend="552"/>
      </memberdef>
      <memberdef kind="variable" id="classPwmHAL_1aab092d00d456bcdaf311e2310fe5e8ab" prot="private" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t PwmHAL::period[HRTIM_CHANNELS]</definition>
        <argsstring>[HRTIM_CHANNELS]</argsstring>
        <name>period</name>
        <qualifiedname>PwmHAL::period</qualifiedname>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="553" column="15" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" bodystart="553" bodyend="553"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classPwmHAL_1ada626c5c7319c8205df8596331d688fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::initUnit</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>initUnit</name>
        <qualifiedname>PwmHAL::initUnit</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function initializes a timing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="72" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1ac2900f6b49f6110a4b1aadacf120201a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::startDualOutput</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>startDualOutput</name>
        <qualifiedname>PwmHAL::startDualOutput</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function starts both outputs of the selected HRTIM channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="79" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a8bb44e5995a78e17a6545498184758e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::stopDualOutput</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>stopDualOutput</name>
        <qualifiedname>PwmHAL::stopDualOutput</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function stops both outputs of the selected HRTIM channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="86" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a68b7bb1265a2b9af98cbd66d8c3252af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::startSingleOutput</definition>
        <argsstring>(hrtim_tu_number_t tu, hrtim_output_number_t output)</argsstring>
        <name>startSingleOutput</name>
        <qualifiedname>PwmHAL::startSingleOutput</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>tu</declname>
        </param>
        <param>
          <type>hrtim_output_number_t</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function starts only one output of the selected HRTIM channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">output</parametername>
</parameternamelist>
<parameterdescription>
<para>output to disable: <computeroutput>TIMING_OUTPUT1</computeroutput>,<computeroutput>TIMING_OUTPUT2</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="94" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="49" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1af87a7e0c7647bee04c2401cd404d779e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::stopSingleOutput</definition>
        <argsstring>(hrtim_tu_number_t tu, hrtim_output_number_t output)</argsstring>
        <name>stopSingleOutput</name>
        <qualifiedname>PwmHAL::stopSingleOutput</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>tu</declname>
        </param>
        <param>
          <type>hrtim_output_number_t</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function starts only one output of the selected HRTIM channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">output</parametername>
</parameternamelist>
<parameterdescription>
<para>output to disable: <computeroutput>TIMING_OUTPUT1</computeroutput>,<computeroutput>TIMING_OUTPUT2</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="102" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="106" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1ace857487759978c81233cb4dcb1698e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setModulation</definition>
        <argsstring>(hrtim_tu_number_t pwmX, hrtim_cnt_t modulation)</argsstring>
        <name>setModulation</name>
        <qualifiedname>PwmHAL::setModulation</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <param>
          <type>hrtim_cnt_t</type>
          <declname>modulation</declname>
        </param>
        <briefdescription>
<para>This function sets the modulation mode for a given PWM unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">modulation</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Modulation: <computeroutput>Lft_aligned</computeroutput> or <computeroutput>UpDwn</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>this function must be called BEFORE initializing the selected timer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="112" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="163" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a9c8a6859818c4a5d4cb808003757ccd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setSwitchConvention</definition>
        <argsstring>(hrtim_tu_number_t pwmX, hrtim_switch_convention_t convention)</argsstring>
        <name>setSwitchConvention</name>
        <qualifiedname>PwmHAL::setSwitchConvention</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <param>
          <type>hrtim_switch_convention_t</type>
          <declname>convention</declname>
        </param>
        <briefdescription>
<para>This function sets the switch convention for a given PWM unit i.e. you decide which one of the output of the timer can be controlled with duty cycle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">convention</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Switch to be driven by the duty cycle: <linebreak/>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<itemizedlist>
<listitem><para><computeroutput>PWMx1</computeroutput>: <computeroutput>BUCK</computeroutput> convention, switch HIGH</para>
</listitem><listitem><para><computeroutput>PWMx2</computeroutput>: <computeroutput>BOOST</computeroutput> convention, switch LOW</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>this function must be called before the timer initialization </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="128" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="173" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1aea02fe19f0e4bb1ed9c590cbc6d4d6a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::initFixedFrequency</definition>
        <argsstring>(uint32_t fixed_frequency)</argsstring>
        <name>initFixedFrequency</name>
        <qualifiedname>PwmHAL::initFixedFrequency</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>fixed_frequency</declname>
        </param>
        <briefdescription>
<para>This function initialize the PWM for fixed frequency applications. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fixed_frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>frequency to be fixed in Hz</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function must be called BEFORE initializing any timing unit.</para>
</simplesect>
The frequency will not vary during the operation of the power device.</para>
<para>Use it for fixed frequencies only. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="145" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="193" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a15228ce45c2ffc13faf5b245975f06f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::initVariableFrequency</definition>
        <argsstring>(uint32_t initial_frequency, uint32_t minimal_frequency)</argsstring>
        <name>initVariableFrequency</name>
        <qualifiedname>PwmHAL::initVariableFrequency</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>initial_frequency</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>minimal_frequency</declname>
        </param>
        <briefdescription>
<para>This functions initializes the PWM for variable frequency applications. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">initial_frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial value of the frequency in Hz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">minimal_frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimal value of the frequency in Hz</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function must be called BEFORE initializing any timing unit.</para>
</simplesect>
The user can vary the frequency during the operation of the power device.</para>
<para>This may compromise the resolution of the PWM.</para>
<para>You can check your resolution with the getResolutionPS function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="166" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="184" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1ab009fd531152f6d3a49742521feaf8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setDeadTime</definition>
        <argsstring>(hrtim_tu_number_t pwmX, uint16_t rise_ns, uint16_t fall_ns)</argsstring>
        <name>setDeadTime</name>
        <qualifiedname>PwmHAL::setDeadTime</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>rise_ns</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>fall_ns</declname>
        </param>
        <briefdescription>
<para>This function sets the dead time for the selected timing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rise_ns</parametername>
</parameternamelist>
<parameterdescription>
<para>rising edge dead time in ns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">falling_ns</parametername>
</parameternamelist>
<parameterdescription>
<para>falling edge dead time in ns</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>use this function BEFORE initializing the chosen timer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="179" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="201" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1aafab44228a26febf53e40b09aa0d58eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setDutyCycle</definition>
        <argsstring>(hrtim_tu_number_t pwmX, float32_t duty_cycle)</argsstring>
        <name>setDutyCycle</name>
        <qualifiedname>PwmHAL::setDutyCycle</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>duty_cycle</declname>
        </param>
        <briefdescription>
<para>This function sets the duty cycle for the selected timing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>duty cycle value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="187" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="213" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a4e55773837017da4f50de4fa9dd1fd55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setDutyCycleRaw</definition>
        <argsstring>(hrtim_tu_number_t pwmX, uint16_t duty_cycle)</argsstring>
        <name>setDutyCycleRaw</name>
        <qualifiedname>PwmHAL::setDutyCycleRaw</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>duty_cycle</declname>
        </param>
        <briefdescription>
<para>Sets the duty cycle for the selected timing unit using an unsigned integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>duty cycle value as an unsigned integer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="196" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="222" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a983afd187fcd21d980a5fbd9836588a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setPhaseShift</definition>
        <argsstring>(hrtim_tu_number_t pwmX, int16_t shift)</argsstring>
        <name>setPhaseShift</name>
        <qualifiedname>PwmHAL::setPhaseShift</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
<para>This function sets the phase shift in respect to timer A for the selected timing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shift</parametername>
</parameternamelist>
<parameterdescription>
<para>phase shift value in DEGREES (between <computeroutput>-360</computeroutput> and <computeroutput>360</computeroutput>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Use this function AFTER setting the frequency and initializing the chosen timer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="210" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="255" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a3d02888d0a34aad51c5b5011c927ec15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setMode</definition>
        <argsstring>(hrtim_tu_number_t pwmX, hrtim_pwm_mode_t mode)</argsstring>
        <name>setMode</name>
        <qualifiedname>PwmHAL::setMode</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <param>
          <type>hrtim_pwm_mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>This function sets a special pwm mode for voltage or current mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM mode: <computeroutput>VOLTAGE_MODE</computeroutput> or <computeroutput>CURRENT_MODE</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function must be called BEFORE initializing the selected timing unit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="222" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="455" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a3170ba7199d9b31f2d8655f2373c2683" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hrtim_pwm_mode_t</type>
        <definition>hrtim_pwm_mode_t PwmHAL::getMode</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>getMode</name>
        <qualifiedname>PwmHAL::getMode</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function returns the PWM mode (voltage or current mode) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM mode: <computeroutput>VOLTAGE_MODE</computeroutput> or <computeroutput>CURRENT_MODE</computeroutput> </para>
</simplesect>
<simplesect kind="warning"><para>This function must be called before initializing a timing unit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="232" column="23" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="465" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a9ed91c1b966e9372f134f25925ecab09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setEev</definition>
        <argsstring>(hrtim_tu_number_t pwmX, hrtim_external_trigger_t eev)</argsstring>
        <name>setEev</name>
        <qualifiedname>PwmHAL::setEev</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <param>
          <type>hrtim_external_trigger_t</type>
          <declname>eev</declname>
        </param>
        <briefdescription>
<para>This function sets external event linked to the timing unit essential for the current mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">eev</parametername>
</parameternamelist>
<parameterdescription>
<para>external event trigger: <linebreak/>
 <computeroutput>EEV1</computeroutput>,<computeroutput>EEV2</computeroutput>,<computeroutput>EEV3</computeroutput>,<computeroutput>EEV4</computeroutput>,<computeroutput>EEV5</computeroutput>,<computeroutput>EEV6</computeroutput>,<computeroutput>EEV7</computeroutput>,<computeroutput>EEV8</computeroutput>,<computeroutput>EEV9</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>this function must be called before initializing a timing unit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="243" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="470" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1adff079e739e876b5b6e10bfb04ca7408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hrtim_external_trigger_t</type>
        <definition>hrtim_external_trigger_t PwmHAL::getEev</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>getEev</name>
        <qualifiedname>PwmHAL::getEev</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function sets the external event linked to the timing unit used for the current mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">eev</parametername>
</parameternamelist>
<parameterdescription>
<para>external event trigger: <linebreak/>
 <computeroutput>EEV1</computeroutput>,<computeroutput>EEV2</computeroutput>,<computeroutput>EEV3</computeroutput>,<computeroutput>EEV4</computeroutput>,<computeroutput>EEV5</computeroutput>,<computeroutput>EEV6</computeroutput>,<computeroutput>EEV7</computeroutput>,<computeroutput>EEV8</computeroutput>,<computeroutput>EEV9</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="253" column="31" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="480" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a84947b82459f9b57ea20d8e096c2b98f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hrtim_cnt_t</type>
        <definition>hrtim_cnt_t PwmHAL::getModulation</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>getModulation</name>
        <qualifiedname>PwmHAL::getModulation</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function returns the modulation type of the selected timing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The type of modulation <computeroutput>Lft_aligned</computeroutput> or <computeroutput>UpDwn</computeroutput> (center aligned) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="263" column="18" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="277" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a6e4cef4b010a4f01fc8f66f3dc4c0f96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hrtim_switch_convention_t</type>
        <definition>hrtim_switch_convention_t PwmHAL::getSwitchConvention</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>getSwitchConvention</name>
        <qualifiedname>PwmHAL::getSwitchConvention</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function returns the switching convention of the selected timing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the switch convention :</para>
</simplesect>
<itemizedlist>
<listitem><para><computeroutput>PWMx1</computeroutput>: <computeroutput>BUCK</computeroutput> convention, switch HIGH</para>
</listitem><listitem><para><computeroutput>PWMx2</computeroutput>: <computeroutput>BOOST</computeroutput> convention, switch LOW </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="276" column="32" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="281" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1add5baa32e90605383539439104a3c520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t PwmHAL::getPeriod</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>getPeriod</name>
        <qualifiedname>PwmHAL::getPeriod</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function returns the period of the selected timing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the period value in number of clock cycles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="284" column="15" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="286" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1ac8fcec5ce72f926bc256febbb217b674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t PwmHAL::getPeriodMax</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>getPeriodMax</name>
        <qualifiedname>PwmHAL::getPeriodMax</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function returns the maximum period of the selected timing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the period value in number of clock cycles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="292" column="15" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="291" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a700ab0f6086bce6c05b98322033df1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t PwmHAL::getPeriodMin</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>getPeriodMin</name>
        <qualifiedname>PwmHAL::getPeriodMin</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function returns the period of the selected timing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the period value in number of clock cycles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="300" column="15" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="296" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a0eca11286114ba4f2ecb01791c10599c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setAdcTriggerPostScaler</definition>
        <argsstring>(hrtim_tu_number_t pwmX, uint32_t ps_ratio)</argsstring>
        <name>setAdcTriggerPostScaler</name>
        <qualifiedname>PwmHAL::setAdcTriggerPostScaler</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ps_ratio</declname>
        </param>
        <briefdescription>
<para>This function sets the PostScaler value for the selected timing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ps_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>post scaler ratio</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function must be called after initialiazing a timing unit, and before enabling the adc trigger </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="311" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="301" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a6cbe6d557cb17ccace03754e251b7657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setAdcTrigger</definition>
        <argsstring>(hrtim_tu_number_t pwmX, adc_t adc)</argsstring>
        <name>setAdcTrigger</name>
        <qualifiedname>PwmHAL::setAdcTrigger</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <param>
          <type>adc_t</type>
          <declname>adc</declname>
        </param>
        <briefdescription>
<para>This function sets the adc trigger linked to a timer unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">adc</parametername>
</parameternamelist>
<parameterdescription>
<para>ADC number: <computeroutput>ADC_1</computeroutput>,<computeroutput>ADC_2</computeroutput>,<computeroutput>ADC_3</computeroutput>,<computeroutput>ADC_4</computeroutput>,<computeroutput>ADC_5</computeroutput> <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Call this function: <verbatim>     - BEFORE enabling the adc trigger

     - AFTER initializing the selected timer
</verbatim> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="324" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="393" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a4529a1ed58869c303ebeb753de119d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>adc_t</type>
        <definition>adc_t PwmHAL::getAdcTrigger</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>getAdcTrigger</name>
        <qualifiedname>PwmHAL::getAdcTrigger</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function returns the adc trigger linked to a timer unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ADC number: <computeroutput>ADC_1</computeroutput>,<computeroutput>ADC_2</computeroutput>,<computeroutput>ADC_3</computeroutput>,<computeroutput>ADC_4</computeroutput>,<computeroutput>ADC_5</computeroutput> or</para>
</simplesect>
<computeroutput>UNKNOWN_ADC</computeroutput> if the ADC trigger was not configured for this timing unit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="335" column="12" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="429" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1afe92650407b6600dff96dcbc45fcd3bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::enableAdcTrigger</definition>
        <argsstring>(hrtim_tu_number_t tu_number)</argsstring>
        <name>enableAdcTrigger</name>
        <qualifiedname>PwmHAL::enableAdcTrigger</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>tu_number</declname>
        </param>
        <briefdescription>
<para>This function enables the adc trigger for the selected timing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Call this function only AFTER setting the adc trigger and initializing the chosen timer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="345" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="312" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a3a1764fe6979d17e934f01791a1a8759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::disableAdcTrigger</definition>
        <argsstring>(hrtim_tu_number_t tu_number)</argsstring>
        <name>disableAdcTrigger</name>
        <qualifiedname>PwmHAL::disableAdcTrigger</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>tu_number</declname>
        </param>
        <briefdescription>
<para>This function disables the adc trigger for the selected timing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="352" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="340" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a4b426a6025a2189f49cabeb9fea8f718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setAdcTriggerInstant</definition>
        <argsstring>(hrtim_tu_number_t pwmX, float32_t trig_val)</argsstring>
        <name>setAdcTriggerInstant</name>
        <qualifiedname>PwmHAL::setAdcTriggerInstant</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>trig_val</declname>
        </param>
        <briefdescription>
<para>This function sets the comparator value at which the ADC is trigered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">trig_val</parametername>
</parameternamelist>
<parameterdescription>
<para>a float value between 0 and 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="361" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="329" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1aac2c7e1b0850373ef8be41cc6cc795f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setAdcEdgeTrigger</definition>
        <argsstring>(hrtim_tu_number_t pwmX, hrtim_adc_edgetrigger_t adc_edge_trigger)</argsstring>
        <name>setAdcEdgeTrigger</name>
        <qualifiedname>PwmHAL::setAdcEdgeTrigger</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <param>
          <type>hrtim_adc_edgetrigger_t</type>
          <declname>adc_edge_trigger</declname>
        </param>
        <briefdescription>
<para>This function sets the adc trig rollover mode for the selected timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">adc_edge_trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>Rollover mode: <computeroutput>EdgeTrigger_up</computeroutput>, <computeroutput>EdgeTrigger_down</computeroutput>, <computeroutput>EdgeTrigger_Both</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function must be called BEFORE initialiazing the selected timing unit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="374" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="377" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1add731e413e7dbec507aabd5e121461cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hrtim_adc_edgetrigger_t</type>
        <definition>hrtim_adc_edgetrigger_t PwmHAL::getAdcEdgeTrigger</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>getAdcEdgeTrigger</name>
        <qualifiedname>PwmHAL::getAdcEdgeTrigger</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function returns the adc trigger rollover mode for the selected timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rollover mode: <computeroutput>EdgeTrigger_up</computeroutput>, <computeroutput>EdgeTrigger_down</computeroutput>, <computeroutput>EdgeTrigger_Both</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="386" column="30" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="388" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a57ad82936322d09ea21d8136b4a99adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setAdcDecimation</definition>
        <argsstring>(hrtim_tu_number_t pwmX, uint32_t decimation)</argsstring>
        <name>setAdcDecimation</name>
        <qualifiedname>PwmHAL::setAdcDecimation</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>decimation</declname>
        </param>
        <briefdescription>
<para>This function sets the number of event which will be ignored between two events.ie. you divide the number of trigger in a fixed period. </para>
        </briefdescription>
        <detaileddescription>
<para>For example if :</para>
<para><itemizedlist>
<listitem><para><computeroutput>decimation = 1</computeroutput>, nothing changes but with</para>
</listitem><listitem><para><computeroutput>decimation = 2</computeroutput>, you have twice less adc trigger</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">decimation</parametername>
</parameternamelist>
<parameterdescription>
<para>decimation/post-scaler: a number between 1 and 32</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>this function must be called AFTER initialiazing the selected timing unit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="406" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="485" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a87f02068cb744707860185045c86819f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::disablePeriodEvnt</definition>
        <argsstring>(hrtim_tu_t PWM_tu)</argsstring>
        <name>disablePeriodEvnt</name>
        <qualifiedname>PwmHAL::disablePeriodEvnt</qualifiedname>
        <param>
          <type>hrtim_tu_t</type>
          <declname>PWM_tu</declname>
        </param>
        <briefdescription>
<para>This function disables the interrupt on repetition counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">PWM_tu</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit:<computeroutput>TIMA</computeroutput>,<computeroutput>TIMB</computeroutput>,<computeroutput>TIMC</computeroutput>,<computeroutput>TIMD</computeroutput>,<computeroutput>TIME</computeroutput>,<computeroutput>TIMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="413" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="357" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a350644c31ccf6b662c2f450f27118c56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setPeriodEvntRep</definition>
        <argsstring>(hrtim_tu_t PWM_tu, uint32_t repetition)</argsstring>
        <name>setPeriodEvntRep</name>
        <qualifiedname>PwmHAL::setPeriodEvntRep</qualifiedname>
        <param>
          <type>hrtim_tu_t</type>
          <declname>PWM_tu</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>repetition</declname>
        </param>
        <briefdescription>
<para>This function sets the repetition counter to ISR period. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">PWM_tu</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit:<computeroutput>TIMA</computeroutput>,<computeroutput>TIMB</computeroutput>,<computeroutput>TIMC</computeroutput>,<computeroutput>TIMD</computeroutput>,<computeroutput>TIME</computeroutput>,<computeroutput>TIMF</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">repetition</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of repetition before the interruption on repetition counter event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="423" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="362" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a18e7d18b48641e091ec414b85fe22342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t PwmHAL::getPeriodEvntRep</definition>
        <argsstring>(hrtim_tu_t PWM_tu)</argsstring>
        <name>getPeriodEvntRep</name>
        <qualifiedname>PwmHAL::getPeriodEvntRep</qualifiedname>
        <param>
          <type>hrtim_tu_t</type>
          <declname>PWM_tu</declname>
        </param>
        <briefdescription>
<para>This function returns the repetition counter value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">PWM_tu</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit:<computeroutput>TIMA</computeroutput>,<computeroutput>TIMB</computeroutput>,<computeroutput>TIMC</computeroutput>,<computeroutput>TIMD</computeroutput>,<computeroutput>TIME</computeroutput>,<computeroutput>TIMF</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>repetition counter value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="432" column="15" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a5fe0a6f146efcc74d113c98b5e0b9499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::configurePeriodEvnt</definition>
        <argsstring>(hrtim_tu_t PWM_tu, uint32_t repetition, hrtim_callback_t callback)</argsstring>
        <name>configurePeriodEvnt</name>
        <qualifiedname>PwmHAL::configurePeriodEvnt</qualifiedname>
        <param>
          <type>hrtim_tu_t</type>
          <declname>PWM_tu</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>repetition</declname>
        </param>
        <param>
          <type>hrtim_callback_t</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>This function configures the interrupt on repetition counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">PWM_tu</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit:<computeroutput>TIMA</computeroutput>,<computeroutput>TIMB</computeroutput>,<computeroutput>TIMC</computeroutput>,<computeroutput>TIMD</computeroutput>,<computeroutput>TIME</computeroutput>,<computeroutput>TIMF</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">repetition</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of repetition before the interruption on repetition counter event </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call each interupt </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="443" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="345" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a4de7e5072911ef0066258f8426a8d2ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::enablePeriodEvnt</definition>
        <argsstring>(hrtim_tu_t PWM_tu)</argsstring>
        <name>enablePeriodEvnt</name>
        <qualifiedname>PwmHAL::enablePeriodEvnt</qualifiedname>
        <param>
          <type>hrtim_tu_t</type>
          <declname>PWM_tu</declname>
        </param>
        <briefdescription>
<para>This function enables the interrupt on repetition counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">PWM_tu</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit:<computeroutput>TIMA</computeroutput>,<computeroutput>TIMB</computeroutput>,<computeroutput>TIMC</computeroutput>,<computeroutput>TIMD</computeroutput>,<computeroutput>TIME</computeroutput>,<computeroutput>TIMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="452" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="352" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a116866358e313d5425d5510ee4488df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t PwmHAL::getPeriodUs</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>getPeriodUs</name>
        <qualifiedname>PwmHAL::getPeriodUs</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function returns the period in µs of the selected timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="459" column="15" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1ac0f1af4b33a998900bd8ccb2268ceb9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setFrequency</definition>
        <argsstring>(uint32_t frequency_update)</argsstring>
        <name>setFrequency</name>
        <qualifiedname>PwmHAL::setFrequency</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>frequency_update</declname>
        </param>
        <briefdescription>
<para>Change the frequency/period after it has been initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">frequency_update</parametername>
</parameternamelist>
<parameterdescription>
<para>The new frequency in Hz </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>The new frequency can&apos;t be inferior to the the one set in the initialization step.</para>
</simplesect>
Use it AFTER the initialization of the timing unit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="469" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="500" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1adaf957e99991d75c976adfc0dd8068b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t PwmHAL::getFrequencyMin</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>getFrequencyMin</name>
        <qualifiedname>PwmHAL::getFrequencyMin</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function returns the minimum frequency of the selected timer in Hz. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="477" column="15" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="514" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a9d140712c24a919ea471e040cb4aee18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t PwmHAL::getFrequencyMax</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>getFrequencyMax</name>
        <qualifiedname>PwmHAL::getFrequencyMax</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function returns the maximum frequency of the selected timer in Hz. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="485" column="15" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="509" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a326698f2520eed1637959c67da21fb55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t PwmHAL::getResolutionPs</definition>
        <argsstring>(hrtim_tu_number_t pwmX)</argsstring>
        <name>getResolutionPs</name>
        <qualifiedname>PwmHAL::getResolutionPs</qualifiedname>
        <param>
          <type>hrtim_tu_number_t</type>
          <declname>pwmX</declname>
        </param>
        <briefdescription>
<para>This function returns the resolution of the timing unit in picoseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pwmX</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM Unit: <computeroutput>PWMA</computeroutput>,<computeroutput>PWMB</computeroutput>,<computeroutput>PWMC</computeroutput>,<computeroutput>PWMD</computeroutput>,<computeroutput>PWME</computeroutput>,<computeroutput>PWMF</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The resolution of the PWM depends on the prescaler that is automatically calculated when the master unit is initialized.</para>
</simplesect>
For an HRTIM frequency of =170MHz:</para>
<para><itemizedlist>
<listitem><para><computeroutput>PRSCL = 0</computeroutput>: <computeroutput>fHRTIM x 32 = 4.608 GHz</computeroutput> - <computeroutput>Res:00184 ps - Min PWM f: 83.00 kHz</computeroutput></para>
</listitem><listitem><para><computeroutput>PRSCL = 1</computeroutput>: <computeroutput>fHRTIM x 16 = 2.304 GHz</computeroutput> - <computeroutput>Res:00368 ps - Min PWM f: 41.50 kHz</computeroutput></para>
</listitem><listitem><para><computeroutput>PRSCL = 2</computeroutput>: <computeroutput>fHRTIM x 08 = 1.152 GHz</computeroutput> - <computeroutput>Res:00735 ps - Min PWM f: 20.80 kHz</computeroutput></para>
</listitem><listitem><para><computeroutput>PRSCL = 3</computeroutput>: <computeroutput>fHRTIM x 04 = 0.576 GHz</computeroutput> - <computeroutput>Res:01470 ps - Min PWM f: 10.40 kHz</computeroutput></para>
</listitem><listitem><para><computeroutput>PRSCL = 4</computeroutput>: <computeroutput>fHRTIM x 02 = 0.288 GHz</computeroutput> - <computeroutput>Res:02940 ps - Min PWM f: 05.20 kHz</computeroutput></para>
</listitem><listitem><para><computeroutput>PRSCL = 5</computeroutput>: <computeroutput>fHRTIM x 01 = 0.144 GHz</computeroutput> - <computeroutput>Res:05880 ps - Min PWM f: 02.60 kHz</computeroutput></para>
</listitem><listitem><para><computeroutput>PRSCL = 6</computeroutput>: <computeroutput>fHRTIM / 02 = 0.072 GHz</computeroutput> - <computeroutput>Res:11760 ps - Min PWM f: 01.30 kHz</computeroutput></para>
</listitem><listitem><para><computeroutput>PRSCL = 7</computeroutput>: <computeroutput>fHRTIM / 04 = 0.036 GHz</computeroutput> - <computeroutput>Res:23530 ps - Min PWM f: 00.65 kHz</computeroutput> </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="516" column="15" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="519" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a7e9f87c6802c3a69a324c87ccbb8021d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::initBurstMode</definition>
        <argsstring>()</argsstring>
        <name>initBurstMode</name>
        <qualifiedname>PwmHAL::initBurstMode</qualifiedname>
        <briefdescription>
<para>This function initialize burst mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="522" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="525" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a624bfb5956ddc092d99e31e0f44265c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::setBurstMode</definition>
        <argsstring>(int bm_cmp, int bm_per)</argsstring>
        <name>setBurstMode</name>
        <qualifiedname>PwmHAL::setBurstMode</qualifiedname>
        <param>
          <type>int</type>
          <declname>bm_cmp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bm_per</declname>
        </param>
        <briefdescription>
<para>This function sets burst mode parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bm_cmp</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of period of PWM off </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bm_per</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of PWM period </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="530" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="530" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a0f6a1c2984beedc1ead9b2111013d556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::startBurstMode</definition>
        <argsstring>()</argsstring>
        <name>startBurstMode</name>
        <qualifiedname>PwmHAL::startBurstMode</qualifiedname>
        <briefdescription>
<para>This function starts burst mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="536" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="535" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1ad07800b09483f157769f22690ca51a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::stopBurstMode</definition>
        <argsstring>()</argsstring>
        <name>stopBurstMode</name>
        <qualifiedname>PwmHAL::stopBurstMode</qualifiedname>
        <briefdescription>
<para>This function stops burst mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="542" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="540" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classPwmHAL_1a87b314a43c49ce9536c2bb70a4ee2a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PwmHAL::deInitBurstMode</definition>
        <argsstring>()</argsstring>
        <name>deInitBurstMode</name>
        <qualifiedname>PwmHAL::deInitBurstMode</qualifiedname>
        <briefdescription>
<para>This function deinit burst mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="548" column="11" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.cpp" bodystart="545" bodyend="548"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Handles all pwm signals for the spin board. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Use this element to call functions related to the pwm. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" line="62" column="1" bodyfile="docs/core/zephyr/modules/owntech_spin_api/zephyr/src/PwmHAL.h" bodystart="63" bodyend="555"/>
    <listofallmembers>
      <member refid="classPwmHAL_1a5fe0a6f146efcc74d113c98b5e0b9499" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>configurePeriodEvnt</name></member>
      <member refid="classPwmHAL_1a87b314a43c49ce9536c2bb70a4ee2a02" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>deInitBurstMode</name></member>
      <member refid="classPwmHAL_1a3a1764fe6979d17e934f01791a1a8759" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>disableAdcTrigger</name></member>
      <member refid="classPwmHAL_1a87f02068cb744707860185045c86819f" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>disablePeriodEvnt</name></member>
      <member refid="classPwmHAL_1afe92650407b6600dff96dcbc45fcd3bf" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>enableAdcTrigger</name></member>
      <member refid="classPwmHAL_1a4de7e5072911ef0066258f8426a8d2ad" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>enablePeriodEvnt</name></member>
      <member refid="classPwmHAL_1add731e413e7dbec507aabd5e121461cf" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>getAdcEdgeTrigger</name></member>
      <member refid="classPwmHAL_1a4529a1ed58869c303ebeb753de119d22" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>getAdcTrigger</name></member>
      <member refid="classPwmHAL_1adff079e739e876b5b6e10bfb04ca7408" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>getEev</name></member>
      <member refid="classPwmHAL_1a9d140712c24a919ea471e040cb4aee18" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>getFrequencyMax</name></member>
      <member refid="classPwmHAL_1adaf957e99991d75c976adfc0dd8068b2" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>getFrequencyMin</name></member>
      <member refid="classPwmHAL_1a3170ba7199d9b31f2d8655f2373c2683" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>getMode</name></member>
      <member refid="classPwmHAL_1a84947b82459f9b57ea20d8e096c2b98f" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>getModulation</name></member>
      <member refid="classPwmHAL_1add5baa32e90605383539439104a3c520" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>getPeriod</name></member>
      <member refid="classPwmHAL_1a18e7d18b48641e091ec414b85fe22342" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>getPeriodEvntRep</name></member>
      <member refid="classPwmHAL_1ac8fcec5ce72f926bc256febbb217b674" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>getPeriodMax</name></member>
      <member refid="classPwmHAL_1a700ab0f6086bce6c05b98322033df1e3" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>getPeriodMin</name></member>
      <member refid="classPwmHAL_1a116866358e313d5425d5510ee4488df7" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>getPeriodUs</name></member>
      <member refid="classPwmHAL_1a326698f2520eed1637959c67da21fb55" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>getResolutionPs</name></member>
      <member refid="classPwmHAL_1a6e4cef4b010a4f01fc8f66f3dc4c0f96" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>getSwitchConvention</name></member>
      <member refid="classPwmHAL_1a7e9f87c6802c3a69a324c87ccbb8021d" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>initBurstMode</name></member>
      <member refid="classPwmHAL_1aea02fe19f0e4bb1ed9c590cbc6d4d6a9" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>initFixedFrequency</name></member>
      <member refid="classPwmHAL_1ada626c5c7319c8205df8596331d688fb" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>initUnit</name></member>
      <member refid="classPwmHAL_1a15228ce45c2ffc13faf5b245975f06f8" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>initVariableFrequency</name></member>
      <member refid="classPwmHAL_1aab092d00d456bcdaf311e2310fe5e8ab" prot="private" virt="non-virtual"><scope>PwmHAL</scope><name>period</name></member>
      <member refid="classPwmHAL_1a57ad82936322d09ea21d8136b4a99adf" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setAdcDecimation</name></member>
      <member refid="classPwmHAL_1aac2c7e1b0850373ef8be41cc6cc795f4" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setAdcEdgeTrigger</name></member>
      <member refid="classPwmHAL_1a6cbe6d557cb17ccace03754e251b7657" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setAdcTrigger</name></member>
      <member refid="classPwmHAL_1a4b426a6025a2189f49cabeb9fea8f718" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setAdcTriggerInstant</name></member>
      <member refid="classPwmHAL_1a0eca11286114ba4f2ecb01791c10599c" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setAdcTriggerPostScaler</name></member>
      <member refid="classPwmHAL_1a624bfb5956ddc092d99e31e0f44265c2" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setBurstMode</name></member>
      <member refid="classPwmHAL_1ab009fd531152f6d3a49742521feaf8e4" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setDeadTime</name></member>
      <member refid="classPwmHAL_1aafab44228a26febf53e40b09aa0d58eb" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setDutyCycle</name></member>
      <member refid="classPwmHAL_1a4e55773837017da4f50de4fa9dd1fd55" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setDutyCycleRaw</name></member>
      <member refid="classPwmHAL_1a9ed91c1b966e9372f134f25925ecab09" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setEev</name></member>
      <member refid="classPwmHAL_1ac0f1af4b33a998900bd8ccb2268ceb9f" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setFrequency</name></member>
      <member refid="classPwmHAL_1a3d02888d0a34aad51c5b5011c927ec15" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setMode</name></member>
      <member refid="classPwmHAL_1ace857487759978c81233cb4dcb1698e9" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setModulation</name></member>
      <member refid="classPwmHAL_1a350644c31ccf6b662c2f450f27118c56" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setPeriodEvntRep</name></member>
      <member refid="classPwmHAL_1a983afd187fcd21d980a5fbd9836588a6" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setPhaseShift</name></member>
      <member refid="classPwmHAL_1a9c8a6859818c4a5d4cb808003757ccd2" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>setSwitchConvention</name></member>
      <member refid="classPwmHAL_1a0f6a1c2984beedc1ead9b2111013d556" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>startBurstMode</name></member>
      <member refid="classPwmHAL_1ac2900f6b49f6110a4b1aadacf120201a" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>startDualOutput</name></member>
      <member refid="classPwmHAL_1a68b7bb1265a2b9af98cbd66d8c3252af" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>startSingleOutput</name></member>
      <member refid="classPwmHAL_1ad07800b09483f157769f22690ca51a65" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>stopBurstMode</name></member>
      <member refid="classPwmHAL_1a8bb44e5995a78e17a6545498184758e2" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>stopDualOutput</name></member>
      <member refid="classPwmHAL_1af87a7e0c7647bee04c2401cd404d779e" prot="public" virt="non-virtual"><scope>PwmHAL</scope><name>stopSingleOutput</name></member>
      <member refid="classPwmHAL_1a754756b12d99c2f349ca9133f65f66d3" prot="private" virt="non-virtual"><scope>PwmHAL</scope><name>swap_state</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
