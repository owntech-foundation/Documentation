<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classDataAPI" kind="class" language="C++" prot="public">
    <compoundname>DataAPI</compoundname>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classDataAPI_1a5b698fe4690fb8fbf33477e8b2d247a4" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DataAPI::is_started</definition>
        <argsstring></argsstring>
        <name>is_started</name>
        <qualifiedname>DataAPI::is_started</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="612" column="6" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" bodystart="612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classDataAPI_1a82af28cfe103ccc54621ecda804baf6d" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t DataAPI::channels_ranks[ADC_COUNT][CHANNELS_PER_ADC]</definition>
        <argsstring>[ADC_COUNT][CHANNELS_PER_ADC]</argsstring>
        <name>channels_ranks</name>
        <qualifiedname>DataAPI::channels_ranks</qualifiedname>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="613" column="9" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" bodystart="613" bodyend="613"/>
      </memberdef>
      <memberdef kind="variable" id="classDataAPI_1aa256f9f332fb816b047a514a0fa11649" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t DataAPI::current_rank[ADC_COUNT]</definition>
        <argsstring>[ADC_COUNT]</argsstring>
        <name>current_rank</name>
        <qualifiedname>DataAPI::current_rank</qualifiedname>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="614" column="9" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" bodystart="614" bodyend="614"/>
      </memberdef>
      <memberdef kind="variable" id="classDataAPI_1ae19ede93eb2655a763eeaf83ea0420a4" prot="private" static="no" mutable="no">
        <type>DispatchMethod_t</type>
        <definition>DispatchMethod_t DataAPI::dispatch_method</definition>
        <argsstring></argsstring>
        <name>dispatch_method</name>
        <qualifiedname>DataAPI::dispatch_method</qualifiedname>
        <initializer>= DispatchMethod_t::on_dma_interrupt</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="615" column="18" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" bodystart="615" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classDataAPI_1a0d949a03948434ebfbfa3c7f5de23412" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t DataAPI::repetition_count_between_dispatches</definition>
        <argsstring></argsstring>
        <name>repetition_count_between_dispatches</name>
        <qualifiedname>DataAPI::repetition_count_between_dispatches</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="616" column="10" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" bodystart="616" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classDataAPI_1a24d81465b3c408f5522c12c94423d074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t DataAPI::enableShieldChannel</definition>
        <argsstring>(uint8_t adc_num, channel_t channel_name)</argsstring>
        <name>enableShieldChannel</name>
        <qualifiedname>DataAPI::enableShieldChannel</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>channel_t</type>
          <declname>channel_name</declname>
        </param>
        <briefdescription>
<para>This function is used to enable a channel on a given ADC using its name on a shield, rather than the ADC channel number. This function requires the presence of an &quot;adc-channels&quot; node in the shield device-tree. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function must be called <emphasis>before</emphasis> ADC is started.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the ADC on which channel is to be enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the channel using enumeration channel_t.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if channel was correctly enabled, -1 if there was an error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="121" column="8" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a9eeea7fbd0c0447a3a9da20b381bc855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataAPI::enableTwistDefaultChannels</definition>
        <argsstring>()</argsstring>
        <name>enableTwistDefaultChannels</name>
        <qualifiedname>DataAPI::enableTwistDefaultChannels</qualifiedname>
        <briefdescription>
<para>This function is used to enable acquisition of all voltage/current channels on the Twist shield. Channels are attributed as follows: ADC1: - I1_LOW ADC2: - I2_LOW. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>V1_LOW - V2_LOW</para>
</listitem><listitem><para>V_HIGH - I_HIGH</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>This function will configure ADC 1 and 2 to be automatically triggered by the HRTIM, so the board must be configured as a power converted to enable HRTIM events. All other ADCs remain software triggered, thus will only be acquired when <ref refid="classDataAPI_1a091a1f05f90753af26f6a4eebf9329d4" kindref="member">triggerAcquisition()</ref> is called.</para>
</simplesect>
<simplesect kind="note"><para>This function must be called <emphasis>before</emphasis> ADC is started. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="139" column="6" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="63" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a1cd2d1dc2e78f05cbeb3b2e91e5b4e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t *</type>
        <definition>uint16_t * DataAPI::getRawValues</definition>
        <argsstring>(channel_t channel, uint32_t &amp;number_of_values_acquired)</argsstring>
        <name>getRawValues</name>
        <qualifiedname>DataAPI::getRawValues</qualifiedname>
        <param>
          <type>channel_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>number_of_values_acquired</declname>
        </param>
        <briefdescription>
<para>Function to access the acquired data for specified channel. This function provides a buffer in which all data that have been acquired since last call are stored. The count of these values is returned as an output parameter: the user has to define a variable and pass it as the parameter of the function. The variable will be updated with the number of values that are available in the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can&apos;t be called before the channel is enabled and the <ref refid="classDataAPI" kindref="compound">DataAPI</ref> module is started, either explicitly or by starting the Uninterruptible task.</para>
</simplesect>
<simplesect kind="note"><para>When calling this function, it invalidates the buffer returned by a previous call to the same function. However, different channels buffers are independent from each other.</para>
</simplesect>
<simplesect kind="note"><para>When using this functions, the user is responsible for data conversion. Use matching data.convert*() function for this purpose.</para>
</simplesect>
<simplesect kind="note"><para>When using this function, DO NOT use the function to get the latest converted value for the same channel as this function will clear the buffer and disregard all values but the latest.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the shield channel from which to obtain values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_values_acquired</parametername>
</parameternamelist>
<parameterdescription>
<para>Pass an uint32_t variable. This variable will be updated with the number of values that are present in the returned buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a buffer in which the acquired values are stored. If number_of_values_acquired is 0, do not try to access the buffer as it may be nullptr. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="176" column="10" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="83" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a4c384884b21d4bac9ef5e1d2c90a5b9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t DataAPI::peek</definition>
        <argsstring>(channel_t channel)</argsstring>
        <name>peek</name>
        <qualifiedname>DataAPI::peek</qualifiedname>
        <param>
          <type>channel_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function to access the latest value available from the channel, expressed in the relevant unit for the data: Volts, Amperes, or Degree Celcius. This function will not touch anything in the buffer, and thus can be called safely at any time after the module has been started. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can&apos;t be called before the channel is enabled and the <ref refid="classDataAPI" kindref="compound">DataAPI</ref> module is started, either explicitly or by starting the Uninterruptible task.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the shield channel from which to obtain value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Latest available value available from the given channel. If there was no value acquired in this channel yet, return value is NO_VALUE. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="195" column="11" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a25fdfec31e1ff0f57dd9efd269a896e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t DataAPI::getLatest</definition>
        <argsstring>(channel_t channel, uint8_t *dataValid=nullptr)</argsstring>
        <name>getLatest</name>
        <qualifiedname>DataAPI::getLatest</qualifiedname>
        <param>
          <type>channel_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>dataValid</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This function returns the latest acquired measure expressed in the relevant unit for the channel: Volts, Amperes, or Degree Celcius. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can&apos;t be called before the channel is enabled and the <ref refid="classDataAPI" kindref="compound">DataAPI</ref> module is started, either explicitly or by starting the Uninterruptible task.</para>
</simplesect>
<simplesect kind="note"><para>When using this functions, you loose the ability to access raw values using data.get*RawValues() function for the matching channel, as data.get*() function clears the buffer on each call.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the shield channel from which to obtain value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataValid</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an uint8_t variable. This parameter is facultative. If this parameter is provided, it will be updated to indicate information about data. Possible values for this parameter will be:<itemizedlist>
<listitem><para>DATA_IS_OK if returned data is a newly acquired data,</para>
</listitem><listitem><para>DATA_IS_OLD if returned data has already been provided before (no new data available since latest time this function was called),</para>
</listitem><listitem><para>DATA_IS_MISSING if returned data is NO_VALUE.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Latest acquired measure for the channel. If no value was acquired in this channel yet, return value is NO_VALUE. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="225" column="11" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="95" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a4e86c7e940a187d04c88b96aafb78bf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t DataAPI::convert</definition>
        <argsstring>(channel_t channel, uint16_t raw_value)</argsstring>
        <name>convert</name>
        <qualifiedname>DataAPI::convert</qualifiedname>
        <param>
          <type>channel_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>raw_value</declname>
        </param>
        <briefdescription>
<para>Use this function to convert values obtained using matching data.get*RawValues() function to relevant unit for the data: Volts, Amperes, or Degree Celcius. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can&apos;t be called before the channel is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the shield channel from which the value originates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw value obtained from which the value originates</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted value in the relevant unit. Returns -5000 if the channel is not active. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="239" column="11" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="101" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a26f5b94ff35f8263153bbb92a14a6682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataAPI::setParameters</definition>
        <argsstring>(channel_t channel, float32_t gain, float32_t offset)</argsstring>
        <name>setParameters</name>
        <qualifiedname>DataAPI::setParameters</qualifiedname>
        <param>
          <type>channel_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Use this function to tweak the conversion values for the channel if default values are not accurate enough. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can&apos;t be called before the channel is enabled. The <ref refid="classDataAPI" kindref="compound">DataAPI</ref> must not have been started, neither explicitly nor by starting the Uninterruptible task.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the shield channel to set conversion values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>Gain to be applied (multiplied) to the channel raw value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset to be applied (added) to the channel value after gain has been applied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="254" column="6" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1aef69385146e128a353b0f88618464339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t DataAPI::retrieveStoredParameterValue</definition>
        <argsstring>(channel_t channel, parameter_t parameter_name)</argsstring>
        <name>retrieveStoredParameterValue</name>
        <qualifiedname>DataAPI::retrieveStoredParameterValue</qualifiedname>
        <param>
          <type>channel_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>parameter_t</type>
          <declname>parameter_name</declname>
        </param>
        <briefdescription>
<para>Use this function to get the current conversion parameteres for the chosen channel . </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can&apos;t be called before the channel is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the shield channel to get a conversion parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameter_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Paramater to be retreived: <computeroutput>gain</computeroutput> or <computeroutput>offset</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="264" column="11" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="113" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a8bddef1811f64e5ad2d2256c8e1febae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>conversion_type_t</type>
        <definition>conversion_type_t DataAPI::retrieveStoredConversionType</definition>
        <argsstring>(channel_t channel)</argsstring>
        <name>retrieveStoredConversionType</name>
        <qualifiedname>DataAPI::retrieveStoredConversionType</qualifiedname>
        <param>
          <type>channel_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Use this function to get the current conversion type for the chosen channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can&apos;t be called before the channel is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the shield channel to get a conversion parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="273" column="19" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="120" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1ab21994d514ab12bc445145db9c2bc415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t DataAPI::storeParametersInMemory</definition>
        <argsstring>(channel_t channel)</argsstring>
        <name>storeParametersInMemory</name>
        <qualifiedname>DataAPI::storeParametersInMemory</qualifiedname>
        <param>
          <type>channel_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Use this function to write the gain and offset parameters of the board to is non-volatile memory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function should be called after updating the parameters using setParameters.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the shield channel to save the values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="283" column="8" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="132" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a83894ad35bb7fee56cde2c4cf9de424c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t DataAPI::retrieveParametersFromMemory</definition>
        <argsstring>(channel_t channel)</argsstring>
        <name>retrieveParametersFromMemory</name>
        <qualifiedname>DataAPI::retrieveParametersFromMemory</qualifiedname>
        <param>
          <type>channel_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Use this function to read the gain and offset parameters of the board to is non-volatile memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the shield channel to save the values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="290" column="8" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="126" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a4f873db07dbf3cb714bcf8e98dd69867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataAPI::setTwistChannelsUserCalibrationFactors</definition>
        <argsstring>()</argsstring>
        <name>setTwistChannelsUserCalibrationFactors</name>
        <qualifiedname>DataAPI::setTwistChannelsUserCalibrationFactors</qualifiedname>
        <briefdescription>
<para>Retrieve stored parameters from Flash memory and configure ADC parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function requires Console to interact with the user. You must first call console_init() before calling this function.</para>
</simplesect>
<simplesect kind="note"><para>This function can&apos;t be called before <emphasis>all</emphasis> Twist channels have been enabled (you can use <ref refid="classDataAPI_1a9eeea7fbd0c0447a3a9da20b381bc855" kindref="member">enableTwistDefaultChannels()</ref> for that purpose). The <ref refid="classDataAPI" kindref="compound">DataAPI</ref> must not have been started, neither explicitly nor by starting the Uninterruptible task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="304" column="6" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1afa13db051b8efed2cab77c02e8d201ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t DataAPI::enableAcquisition</definition>
        <argsstring>(uint8_t adc_num, uint8_t pin_num)</argsstring>
        <name>enableAcquisition</name>
        <qualifiedname>DataAPI::enableAcquisition</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pin_num</declname>
        </param>
        <briefdescription>
<para>This function is used to enable acquisition on a Spin PIN with a given ADC. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not any pin can be used for acquisiton: the pin must be linked to a channel of the given ADC. Refer to Spin pinout image for PIN/ADC relations.</para>
</simplesect>
<simplesect kind="note"><para>This function must be called <emphasis>before</emphasis> ADC is started.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the ADC on which acquisition is to be done. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the Spin pin to acquire.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if acquisition was correctly enabled, -1 if there was an error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="323" column="8" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="150" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a4656e02f0227660869d5167f456fedfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t DataAPI::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <qualifiedname>DataAPI::start</qualifiedname>
        <briefdescription>
<para>This functions manually starts the acquisition chain. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If your code uses an uninterruptible task, you do not need to start Data Acquisition manually, it will automatically be started at the same time as the task as their internal behavior are intrinsically linked. If for some reason you have an uninterruptible task in your code, but do not want the Scheduling module to be in charge of Data Acquisition, you need to indicate it when starting the uninterruptible task. In that case, Data Acquisition must be manually started using this function. Note that in taht case, dispatch will use DMA interrupts which consumes a non-negligible amount of processor time and it is not advised.</para>
</simplesect>
<simplesect kind="note"><para>Data Acquisition must be started only after ADC module configuration has been fully carried out. No ADC configuration change is allowed after module has been started. If you&apos;re using the Twist shield and are not sure how to initialize ADCs, you can use data.enableTwistDefaultChannels() for that purpose.</para>
</simplesect>
<simplesect kind="note"><para>Data Acquisition must be started before accessing any data.get*() or data.peek*() function. Other Data Acquisition functions are safe to use before starting the module.</para>
</simplesect>
<simplesect kind="return"><para>0 if everything went well, -1 if there was an error. Error is triggered when dispatch method is set to be external, but the repetition value has not provided. Another source of error is trying to start Data Acquisition after it has already been started. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="355" column="8" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="159" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1aa0acfd495a05173afa4c8061c9b0a897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DataAPI::started</definition>
        <argsstring>()</argsstring>
        <name>started</name>
        <qualifiedname>DataAPI::started</qualifiedname>
        <briefdescription>
<para>Checks if the module is already started. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   For auto-spawning threads, this allows to make sure the module
   has already been started before trying to access measures.

   If you don&apos;t use (or don&apos;t know what are) auto-spawning threads,
   just make sure calls to any data.get*() or data.peek*()
   function occur after the uninterruptible task is started, or
   Data Acquisition is manually started, and ignore this function.
</verbatim></para>
<para><simplesect kind="return"><para>true is the module has been started, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="370" column="6" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1abb9623a77e9c1924413f39488814e8b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataAPI::setDispatchMethod</definition>
        <argsstring>(DispatchMethod_t dispatch_method)</argsstring>
        <name>setDispatchMethod</name>
        <qualifiedname>DataAPI::setDispatchMethod</qualifiedname>
        <param>
          <type>DispatchMethod_t</type>
          <declname>dispatch_method</declname>
        </param>
        <briefdescription>
<para>Sets the dispatch method of the module. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   Dispatch makes data from ADCs available to data.get*()
   functions, thus available to the user.
   By default, dispatch is done on interrupt when DMA buffer is
   filled. However, if using the uninterruptible task from the
   scheduling module, Scheduling will take care of dispatch itself
   for better performances. This function is by this module to
   indicate that dispatch is triggered externally.
</verbatim></para>
<para><simplesect kind="note"><para>End-user should not worry about this function, which is used internally by the Scheduling module.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispatch_method</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates when the dispatch should be done (default value: DispatchMethod_t::on_dma_interrupt) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="389" column="6" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a1a359db888adafb5015c0f1fd338defe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DispatchMethod_t</type>
        <definition>DispatchMethod_t DataAPI::getDispatchMethod</definition>
        <argsstring>()</argsstring>
        <name>getDispatchMethod</name>
        <qualifiedname>DataAPI::getDispatchMethod</qualifiedname>
        <briefdescription>
<para>Gets the dispatch method of the module. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>End-user should not worry about this function, which is used internally by the Scheduling module.</para>
</simplesect>
<simplesect kind="return"><para>Dispatch method indicatinng when the dispatch is done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="399" column="18" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1aa73130020e80ffb99f43201e317a53eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataAPI::setRepetitionsBetweenDispatches</definition>
        <argsstring>(uint32_t repetition)</argsstring>
        <name>setRepetitionsBetweenDispatches</name>
        <qualifiedname>DataAPI::setRepetitionsBetweenDispatches</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>repetition</declname>
        </param>
        <briefdescription>
<para>Indicates the repetition count between two external dispatches when it is handled externally by the Scheduling module. This value is used to calibrate buffers sizes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>End-user should not worry about this function, which is used internally by the Scheduling module.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>repetition</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of repetitions between two calls of dispatch. Used to calibrate buffers sizes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="412" column="6" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a091a1f05f90753af26f6a4eebf9329d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataAPI::triggerAcquisition</definition>
        <argsstring>(uint8_t adc_num)</argsstring>
        <name>triggerAcquisition</name>
        <qualifiedname>DataAPI::triggerAcquisition</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <briefdescription>
<para>Triggers an acquisition on a given ADC. Each channel configured on this ADC will be acquired one after the other until all configured channels have been acquired. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can&apos;t be called before the at least one channel is enabled on the ADC and the <ref refid="classDataAPI" kindref="compound">DataAPI</ref> module is started, either explicitly or by starting the Uninterruptible task.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the ADC on which to acquire channels. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="425" column="6" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1aa9bb6640c01ae5bb199275921402c077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t *</type>
        <definition>uint16_t * DataAPI::getRawValues</definition>
        <argsstring>(uint8_t adc_num, uint8_t pin_num, uint32_t &amp;number_of_values_acquired)</argsstring>
        <name>getRawValues</name>
        <qualifiedname>DataAPI::getRawValues</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pin_num</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>number_of_values_acquired</declname>
        </param>
        <briefdescription>
<para>Function to access the acquired data for specified pin. This function provides a buffer in which all data that have been acquired since last call are stored. The count of these values is returned as an output parameter: the user has to define a variable and pass it as the parameter of the function. The variable will be updated with the number of values that are available in the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can&apos;t be called before the pin is enabled. The <ref refid="classDataAPI" kindref="compound">DataAPI</ref> module must have been started, either explicitly or by starting the Uninterruptible task.</para>
</simplesect>
<simplesect kind="note"><para>When calling this function, it invalidates the buffer returned by a previous call to the same function. However, different channels buffers are independent from each other.</para>
</simplesect>
<simplesect kind="note"><para>When using this functions, the user is responsible for data conversion. Use matching data.convert*() function for this purpose.</para>
</simplesect>
<simplesect kind="note"><para>When using this function, DO NOT use the function to get the latest converted value for the same channel as this function will clear the buffer and disregard all values but the latest.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the ADC from which to obtain values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the pin from which to obtain values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_values_acquired</parametername>
</parameternamelist>
<parameterdescription>
<para>Pass an uint32_t variable. This variable will be updated with the number of values that are present in the returned buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a buffer in which the acquired values are stored. If number_of_values_acquired is 0, do not try to access the buffer as it may be nullptr. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="467" column="10" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="216" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a9df2eb63a9f7ef5096cc1b7cbc3ba07d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t DataAPI::peek</definition>
        <argsstring>(uint8_t adc_num, uint8_t pin_num)</argsstring>
        <name>peek</name>
        <qualifiedname>DataAPI::peek</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pin_num</declname>
        </param>
        <briefdescription>
<para>Function to access the latest value available from a pin, expressed in the relevant unit for the data: Volts, Amperes, or Degree Celcius. This function will not touch anything in the buffer, and thus can be called safely at any time after the module has been started. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can&apos;t be called before the pin is enabled. The <ref refid="classDataAPI" kindref="compound">DataAPI</ref> module must have been started, either explicitly or by starting the Uninterruptible task.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the ADC from which to obtain value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the pin from which to obtain values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Latest available value available from the given channel. If there was no value acquired in this channel yet, return value is NO_VALUE. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="486" column="11" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="228" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1accd6afe6fcd2d6faba59aaa10a73a443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t DataAPI::getLatest</definition>
        <argsstring>(uint8_t adc_num, uint8_t pin_num, uint8_t *dataValid=nullptr)</argsstring>
        <name>getLatest</name>
        <qualifiedname>DataAPI::getLatest</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pin_num</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>dataValid</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This function returns the latest acquired measure expressed in the relevant unit for the channel: Volts, Amperes, or Degree Celcius. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can&apos;t be called before the pin is enabled. The <ref refid="classDataAPI" kindref="compound">DataAPI</ref> module must have been started, either explicitly or by starting the Uninterruptible task.</para>
</simplesect>
<simplesect kind="note"><para>When using this functions, you loose the ability to access raw values using data.get*RawValues() function for the matching channel, as data.get*() function clears the buffer on each call.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the ADC from which to obtain value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the pin from which to obtain values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataValid</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an uint8_t variable. This parameter is facultative. If this parameter is provided, it will be updated to indicate information about data. Possible values for this parameter will be:<itemizedlist>
<listitem><para>DATA_IS_OK if returned data is a newly acquired data,</para>
</listitem><listitem><para>DATA_IS_OLD if returned data has already been provided before (no new data available since latest time this function was called),</para>
</listitem><listitem><para>DATA_IS_MISSING if returned data is NO_VALUE.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Latest acquired measure for the channel. If no value was acquired in this channel yet, return value is NO_VALUE. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="517" column="11" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="239" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1af061686467b62f029f7037e753c88b80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t DataAPI::convert</definition>
        <argsstring>(uint8_t adc_num, uint8_t pin_num, uint16_t raw_value)</argsstring>
        <name>convert</name>
        <qualifiedname>DataAPI::convert</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pin_num</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>raw_value</declname>
        </param>
        <briefdescription>
<para>Use this function to convert values obtained using matching data.get*RawValues() function to relevant unit for the data: Volts, Amperes, or Degree Celcius. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can&apos;t be called before the pin is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the ADC from which the value originates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the pin from which to obtain values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw value obtained from the channel buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted value in the relevant unit. If there is an error, returns -5000. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="532" column="11" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="254" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1ab6d39f30efb71ff028ade458ff368e4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataAPI::setParameters</definition>
        <argsstring>(uint8_t adc_num, uint8_t pin_num, float32_t gain, float32_t offset)</argsstring>
        <name>setParameters</name>
        <qualifiedname>DataAPI::setParameters</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pin_num</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Use this function to tweak the conversion values for the channel if default values are not accurate enough. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can&apos;t be called before the pin is enabled. The <ref refid="classDataAPI" kindref="compound">DataAPI</ref> module must not have been started, neither explicitly nor by starting the Uninterruptible task.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the ADC to set conversion values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the pin from which to obtain values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>Gain to be applied (multiplied) to the channel raw value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset to be applied (added) to the channel value after gain has been applied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="548" column="6" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="265" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a95cc5c8937f01c30d2c3b5b1d633ccf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t DataAPI::retrieveStoredParameterValue</definition>
        <argsstring>(uint8_t adc_num, uint8_t pin_num, parameter_t parameter_name)</argsstring>
        <name>retrieveStoredParameterValue</name>
        <qualifiedname>DataAPI::retrieveStoredParameterValue</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pin_num</declname>
        </param>
        <param>
          <type>parameter_t</type>
          <declname>parameter_name</declname>
        </param>
        <briefdescription>
<para>Use this function to get the current conversion parameteres for the chosen channel . </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can&apos;t be called before the channel is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the shield channel to get a conversion parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameter_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Paramater to be retreived: <computeroutput>gain</computeroutput> or <computeroutput>offset</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the value of the parameter. Returns -5000 if the channel is not active. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="560" column="11" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="300" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1ac354cb785b7ddf564c2b5ad0d8fcbb8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>conversion_type_t</type>
        <definition>conversion_type_t DataAPI::retrieveStoredConversionType</definition>
        <argsstring>(uint8_t adc_num, uint8_t pin_num)</argsstring>
        <name>retrieveStoredConversionType</name>
        <qualifiedname>DataAPI::retrieveStoredConversionType</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pin_num</declname>
        </param>
        <briefdescription>
<para>Use this function to get the current conversion type for the chosen channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can&apos;t be called before the channel is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the shield channel to get a conversion parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the type of convertion of the given pin. Returns -5 if the channel is not active. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="571" column="19" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="312" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a2a458ce91e0213377d8fc0524d3a8e85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t DataAPI::storeParametersInMemory</definition>
        <argsstring>(uint8_t adc_num, uint8_t pin_num)</argsstring>
        <name>storeParametersInMemory</name>
        <qualifiedname>DataAPI::storeParametersInMemory</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pin_num</declname>
        </param>
        <briefdescription>
<para>Store the currently configured conversion parameters of a given channel in NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">adc_num</parametername>
</parameternamelist>
<parameterdescription>
<para>ADC number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pin_num</parametername>
</parameternamelist>
<parameterdescription>
<para>SPIN pin number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if parameters were correcly stored, negative value if there was an error: -1: There was an error, -5000: Channel not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="584" column="8" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="277" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1afd8651ac8b9d724ab897e3e663b0c363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t DataAPI::retrieveParametersFromMemory</definition>
        <argsstring>(uint8_t adc_num, uint8_t pin_num)</argsstring>
        <name>retrieveParametersFromMemory</name>
        <qualifiedname>DataAPI::retrieveParametersFromMemory</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pin_num</declname>
        </param>
        <briefdescription>
<para>Retreived previously configured conversion parameters from NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">adc_num</parametername>
</parameternamelist>
<parameterdescription>
<para>ADC number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pin_num</parametername>
</parameternamelist>
<parameterdescription>
<para>SPIN pin number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if parameters were correcly retreived, negative value if there was an error: -1: NVS is empty -2: NVS contains data, but their version doesn&apos;t match current version -3: NVS data is corrupted -4: NVS contains data, but not for the requested channel -5000: Channel not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="599" column="8" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="289" bodyend="298"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classDataAPI_1a78062804a51341b4520e80eb18a48539" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t DataAPI::enableChannel</definition>
        <argsstring>(uint8_t adc_num, uint8_t channel_num)</argsstring>
        <name>enableChannel</name>
        <qualifiedname>DataAPI::enableChannel</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="604" column="8" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="329" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a700139e96b08d9b843f70f286a656379" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t *</type>
        <definition>uint16_t * DataAPI::getChannelRawValues</definition>
        <argsstring>(uint8_t adc_num, uint8_t channel_num, uint32_t &amp;number_of_values_acquired)</argsstring>
        <name>getChannelRawValues</name>
        <qualifiedname>DataAPI::getChannelRawValues</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel_num</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>number_of_values_acquired</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="605" column="10" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="353" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a3fc1988f5b640d2f611ab80628a8b863" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t DataAPI::peekChannel</definition>
        <argsstring>(uint8_t adc_num, uint8_t channel_num)</argsstring>
        <name>peekChannel</name>
        <qualifiedname>DataAPI::peekChannel</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="606" column="11" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="371" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1aab5b1650cc520c70522d95cd6bffee03" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t DataAPI::getChannelLatest</definition>
        <argsstring>(uint8_t adc_num, uint8_t channel_num, uint8_t *dataValid=nullptr)</argsstring>
        <name>getChannelLatest</name>
        <qualifiedname>DataAPI::getChannelLatest</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel_num</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>dataValid</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="607" column="11" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="393" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1ab23f35e543e572e06ccf36e3e69dda84" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t DataAPI::getChannelRank</definition>
        <argsstring>(uint8_t adc_num, uint8_t channel_num)</argsstring>
        <name>getChannelRank</name>
        <qualifiedname>DataAPI::getChannelRank</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="608" column="9" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="455" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="classDataAPI_1a206e7b16cd418eee34f6d709d7854104" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t DataAPI::getChannelNumber</definition>
        <argsstring>(uint8_t adc_num, uint8_t twist_pin)</argsstring>
        <name>getChannelNumber</name>
        <qualifiedname>DataAPI::getChannelNumber</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>adc_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>twist_pin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="609" column="9" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.cpp" bodystart="466" bodyend="622"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" line="102" column="1" bodyfile="docs/core/zephyr/modules/owntech_data_api/zephyr/public_api/DataAPI.h" bodystart="103" bodyend="618"/>
    <listofallmembers>
      <member refid="classDataAPI_1a82af28cfe103ccc54621ecda804baf6d" prot="private" virt="non-virtual"><scope>DataAPI</scope><name>channels_ranks</name></member>
      <member refid="classDataAPI_1a4e86c7e940a187d04c88b96aafb78bf3" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>convert</name></member>
      <member refid="classDataAPI_1af061686467b62f029f7037e753c88b80" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>convert</name></member>
      <member refid="classDataAPI_1aa256f9f332fb816b047a514a0fa11649" prot="private" virt="non-virtual"><scope>DataAPI</scope><name>current_rank</name></member>
      <member refid="classDataAPI_1ae19ede93eb2655a763eeaf83ea0420a4" prot="private" virt="non-virtual"><scope>DataAPI</scope><name>dispatch_method</name></member>
      <member refid="classDataAPI_1afa13db051b8efed2cab77c02e8d201ea" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>enableAcquisition</name></member>
      <member refid="classDataAPI_1a78062804a51341b4520e80eb18a48539" prot="private" virt="non-virtual"><scope>DataAPI</scope><name>enableChannel</name></member>
      <member refid="classDataAPI_1a24d81465b3c408f5522c12c94423d074" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>enableShieldChannel</name></member>
      <member refid="classDataAPI_1a9eeea7fbd0c0447a3a9da20b381bc855" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>enableTwistDefaultChannels</name></member>
      <member refid="classDataAPI_1aab5b1650cc520c70522d95cd6bffee03" prot="private" virt="non-virtual"><scope>DataAPI</scope><name>getChannelLatest</name></member>
      <member refid="classDataAPI_1a206e7b16cd418eee34f6d709d7854104" prot="private" virt="non-virtual"><scope>DataAPI</scope><name>getChannelNumber</name></member>
      <member refid="classDataAPI_1ab23f35e543e572e06ccf36e3e69dda84" prot="private" virt="non-virtual"><scope>DataAPI</scope><name>getChannelRank</name></member>
      <member refid="classDataAPI_1a700139e96b08d9b843f70f286a656379" prot="private" virt="non-virtual"><scope>DataAPI</scope><name>getChannelRawValues</name></member>
      <member refid="classDataAPI_1a1a359db888adafb5015c0f1fd338defe" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>getDispatchMethod</name></member>
      <member refid="classDataAPI_1a25fdfec31e1ff0f57dd9efd269a896e3" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>getLatest</name></member>
      <member refid="classDataAPI_1accd6afe6fcd2d6faba59aaa10a73a443" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>getLatest</name></member>
      <member refid="classDataAPI_1a1cd2d1dc2e78f05cbeb3b2e91e5b4e39" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>getRawValues</name></member>
      <member refid="classDataAPI_1aa9bb6640c01ae5bb199275921402c077" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>getRawValues</name></member>
      <member refid="classDataAPI_1a5b698fe4690fb8fbf33477e8b2d247a4" prot="private" virt="non-virtual"><scope>DataAPI</scope><name>is_started</name></member>
      <member refid="classDataAPI_1a4c384884b21d4bac9ef5e1d2c90a5b9a" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>peek</name></member>
      <member refid="classDataAPI_1a9df2eb63a9f7ef5096cc1b7cbc3ba07d" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>peek</name></member>
      <member refid="classDataAPI_1a3fc1988f5b640d2f611ab80628a8b863" prot="private" virt="non-virtual"><scope>DataAPI</scope><name>peekChannel</name></member>
      <member refid="classDataAPI_1a0d949a03948434ebfbfa3c7f5de23412" prot="private" virt="non-virtual"><scope>DataAPI</scope><name>repetition_count_between_dispatches</name></member>
      <member refid="classDataAPI_1a83894ad35bb7fee56cde2c4cf9de424c" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>retrieveParametersFromMemory</name></member>
      <member refid="classDataAPI_1afd8651ac8b9d724ab897e3e663b0c363" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>retrieveParametersFromMemory</name></member>
      <member refid="classDataAPI_1a8bddef1811f64e5ad2d2256c8e1febae" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>retrieveStoredConversionType</name></member>
      <member refid="classDataAPI_1ac354cb785b7ddf564c2b5ad0d8fcbb8d" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>retrieveStoredConversionType</name></member>
      <member refid="classDataAPI_1aef69385146e128a353b0f88618464339" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>retrieveStoredParameterValue</name></member>
      <member refid="classDataAPI_1a95cc5c8937f01c30d2c3b5b1d633ccf7" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>retrieveStoredParameterValue</name></member>
      <member refid="classDataAPI_1abb9623a77e9c1924413f39488814e8b8" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>setDispatchMethod</name></member>
      <member refid="classDataAPI_1a26f5b94ff35f8263153bbb92a14a6682" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>setParameters</name></member>
      <member refid="classDataAPI_1ab6d39f30efb71ff028ade458ff368e4c" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>setParameters</name></member>
      <member refid="classDataAPI_1aa73130020e80ffb99f43201e317a53eb" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>setRepetitionsBetweenDispatches</name></member>
      <member refid="classDataAPI_1a4f873db07dbf3cb714bcf8e98dd69867" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>setTwistChannelsUserCalibrationFactors</name></member>
      <member refid="classDataAPI_1a4656e02f0227660869d5167f456fedfe" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>start</name></member>
      <member refid="classDataAPI_1aa0acfd495a05173afa4c8061c9b0a897" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>started</name></member>
      <member refid="classDataAPI_1ab21994d514ab12bc445145db9c2bc415" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>storeParametersInMemory</name></member>
      <member refid="classDataAPI_1a2a458ce91e0213377d8fc0524d3a8e85" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>storeParametersInMemory</name></member>
      <member refid="classDataAPI_1a091a1f05f90753af26f6a4eebf9329d4" prot="public" virt="non-virtual"><scope>DataAPI</scope><name>triggerAcquisition</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
